{
  "widgetsBundle": {
    "alias": "thai_yang",
    "title": "Thai Yang",
    "image": null
  },
  "widgetTypes": [
    {
      "alias": "report",
      "name": "Report",
      "descriptor": {
        "type": "timeseries",
        "sizeX": 8,
        "sizeY": 6.5,
        "resources": [
          {
            "url": "http://192.168.194.141:1880/assets/datatables/css/jquery.datatables-1.10.18.min.css"
          },
          {
            "url": "http://192.168.194.141:1880/assets/datatables/css/buttons-1.5.6.min.css"
          },
          {
            "url": "http://192.168.194.141:1880/assets/jszip-2.5.0.min.js"
          },
          {
            "url": "http://192.168.194.141:1880/assets/datatables/js/jquery.datatables-1.10.18.min.js"
          },
          {
            "url": "http://192.168.194.141:1880/assets/datatables/js/buttons-1.5.6.min.js"
          },
          {
            "url": "http://192.168.194.141:1880/assets/datatables/js/buttons.html5-1.5.6.min.js"
          }
        ],
        "templateHtml": "<md-tabs id=\"tabs\" md-dynamic-height>\n    <md-tab ng-repeat=\"table in tables\" label=\"{{table.name}}\">\n        <table id=\"{{table.id}}\" class=\"display compact\" width=\"100%\"></table>\n    </md-tab>\n</md-tabs>\n",
        "templateCss": "",
        "controllerScript": "self.typeParameters = function() {\n    return {\n        maxDatasources: 1\n    };\n};\n\nself.onInit = function() {\n    let attributeService = self.ctx.$scope.$injector.get('attributeService');\n    let periods = [];\n    let columns = [];\n    let dataSet = [];\n    let tables = [];\n    \n    columns[0] = { \n        title: self.ctx.settings.periodTitle||'Date',\n        width: self.ctx.settings.periodColumnWidth||null\n    };\n    \n    self.ctx.datasources[0].dataKeys.forEach(function(dataKey, indexDataKey) {\n        let cellStyleFunction = new Function('value', dataKey.settings.cellStyleFunction);\n        let cellContentFunction = new Function('value', 'rowData', dataKey.settings.cellContentFunction);\n        \n        columns[indexDataKey + 1] = {\n            title: dataKey.label,\n            width: dataKey.settings.columnWidth||null,\n            searchable: false,\n            createdCell: function (td, data) {\n                if(dataKey.settings.useCellStyleFunction) {\n                    try {\n                        let styles = cellStyleFunction(data);\n                        if (styles) {\n                            $(td).css(styles);\n                        }\n                    }\n                    catch (e) {}\n                }\n            },\n            render: function (data, type, rowData, meta) {\n                if (type === 'display') {\n                    if (dataKey.settings.useCellContentFunction) {\n                        try {\n                            return cellContentFunction(data, rowData);\n                        }\n                        catch (e) {}\n                    } \n                    else if (typeof data === 'number') {\n                        let decimals = self.ctx.decimals||(data.toString().split('.')[1]||'').length;\n                        let units = self.ctx.units;\n                        if (dataKey.decimals || dataKey.decimals === 0) {\n                            decimals = dataKey.decimals;\n                        }\n                        if (dataKey.units) {\n                            units = dataKey.units;\n                        }\n                        return self.ctx.utils.formatValue(data, decimals, units, true);\n                    } \n                }\n                return data;\n            }\n        };\n    });\n\n    self.ctx.datasources.forEach(function(datasource, indexDatasource) {\n        dataSet[indexDatasource] = [];\n        \n        tables[indexDatasource] = {\n            id: datasource.name.replace(' ', '%20'),\n            name: datasource.name\n        };\n        \n        if (self.ctx.settings.entityNameAttribute && datasource.entityId) {\n            attributeService.getEntityAttributesValues(datasource.entityType, datasource.entityId, 'SERVER_SCOPE', self.ctx.settings.entityNameAttribute).then(function (attributes) {\n                if (attributes && attributes.length > 0) {\n                    tables[indexDatasource].name = attributes[0].value;\n                }\n            });\n        }\n    });\n    \n    self.ctx.periods = periods;\n    self.ctx.columns = columns;\n    self.ctx.dataSet = dataSet;\n    self.ctx.datatables = [];\n    self.ctx.$scope.tables = tables;\n    self.ctx.currentSubscriptionTimewindow = self.ctx.defaultSubscription.subscriptionTimewindow;\n};\n\nself.onDataUpdated = function() {\n    if (!self.ctx.defaultSubscription.subscriptionTimewindow) {\n        return;\n    }\n    \n    if (self.ctx.datatables.length === 0) {\n        self.ctx.$scope.tables.forEach(function(table, tableIndex) {\n            self.ctx.datatables[tableIndex] = $('#' + table.id, self.ctx.$container).DataTable({\n                data: self.ctx.dataSet[tableIndex],\n                columns: self.ctx.columns,\n                searching: false,\n                order: [0, 'desc'],\n                paging: self.ctx.settings.displayPagination,\n                lengthChange: false,\n                pageLength: self.ctx.settings.defaultPageSize,\n                scrollX: true,\n                scrollCollapse: true,\n                buttons: [\n                    {\n                        extend: 'excelHtml5',\n                        filename: (self.ctx.widgetConfig.title || 'Raw Table') + '_' + table.name,\n                        title: null,\n                        exportOptions: {\n                            orthogonal: 'data'\n                        }\n                    }\n                ]\n            });\n            \n            self.ctx.datatables[tableIndex].button(0).container().prependTo(self.ctx.datatables[tableIndex].table().container());\n        });\n    }\n    \n    let periods = [];\n    self.ctx.data.forEach(function(cellData) {\n        cellData.data.forEach(function(data) {\n            let period = moment(data[0]).format('YYYY-MM-DD hh:mm:ss');\n            if(periods.indexOf(period) === -1) {\n                periods.push(period);\n            }\n        });\n    });\n    periods.sort();\n    self.ctx.periods = periods;\n    \n    self.ctx.datasources.forEach(function(datasource, indexDatasource) {\n        self.ctx.dataSet[indexDatasource] = [];\n        \n        periods.forEach(function (period, indexPeriod) {\n            self.ctx.dataSet[indexDatasource][indexPeriod] = [];\n            self.ctx.dataSet[indexDatasource][indexPeriod][0] = period;\n            \n            self.ctx.datasources[indexDatasource].dataKeys.forEach(function(dataKey, indexDataKey) {\n                self.ctx.dataSet[indexDatasource][indexPeriod][indexDataKey + 1] = null;\n            });\n        });\n    });\n    \n    self.ctx.data.forEach(function(cellData) {\n        let datasourceIndex =  self.ctx.datasources.indexOf(cellData.datasource);\n        let datakeyIndex = cellData.datasource.dataKeys.indexOf(cellData.dataKey);\n        \n        cellData.data.forEach(function (data) {\n            let period = moment(data[0]).format('YYYY-MM-DD hh:mm:ss');\n            let periodIndex = periods.indexOf(period);\n\n            self.ctx.dataSet[datasourceIndex][periodIndex][datakeyIndex + 1] = data[1];\n        });\n    });\n    \n    self.ctx.datatables.forEach(function(datatable, indexDatatable) {\n        datatable.clear();\n        datatable.rows.add(self.ctx.dataSet[indexDatatable]);\n        datatable.rows().invalidate().draw(false);\n    });\n    \n    self.onResizeScrollY();\n};\n\nself.onResize = function() {\n    self.onResizeScrollY();\n    \n    self.ctx.datatables.forEach(function(datatable) {\n        datatable.columns.adjust().draw('page');\n    });\n};\n\nself.onResizeScrollY = function() {\n    let minScrollY = 50;\n    self.ctx.datatables.forEach(function(datatable) {\n        let $tableContainer = $(datatable.table().container());\n        let $tableBody = $('.dataTables_scrollBody', $tableContainer);\n        let scrollY = self.ctx.$container.height() - ($tableContainer.height() - $tableBody.outerHeight()) - 80;\n        scrollY = (scrollY>minScrollY)?scrollY:minScrollY;\n        $tableBody.css('maxHeight', scrollY + 'px');\n    });\n};\n\nself.onDestroy = function() {\n    self.ctx.datatables.forEach(function(datatable) {\n        datatable.destroy();\n    });\n};\n",
        "settingsSchema": "{\n    \"schema\": {\n        \"type\": \"object\",\n        \"title\": \"Entity Settings\",\n        \"properties\": {\n            \"entityNameAttribute\": {\n                \"title\": \"Use attribute instead of entity name\",\n                \"type\": \"string\",\n                \"default\": \"\"\n            },\n            \"periodTitle\": {\n                \"title\": \"Period column title\",\n                \"type\": \"string\",\n                \"default\": \"\"\n            },\n            \"periodColumnWidth\": {\n                \"title\": \"Period column width (px or %)\",\n                \"type\": \"string\",\n                \"default\": \"\"\n            },\n            \"displayPagination\": {\n                \"title\": \"Display pagination\",\n                \"type\": \"boolean\",\n                \"default\": true\n            },\n            \"defaultPageSize\": {\n                \"title\": \"Default page size\",\n                \"type\": \"number\",\n                \"default\": 10\n            }\n        },\n        \"required\": []\n    },\n    \"form\": [\n        \"entityNameAttribute\",\n        \"periodTitle\",\n        \"periodColumnWidth\",\n        \"displayPagination\",\n        \"defaultPageSize\"\n    ]\n}",
        "dataKeySettingsSchema": "{\n    \"schema\": {\n        \"type\": \"object\",\n        \"title\": \"DataKeySettings\",\n        \"properties\": {\n            \"columnWidth\": {\n                \"title\": \"Column width (px or %)\",\n                \"type\": \"string\",\n                \"default\": \"\"\n            },\n            \"useCellStyleFunction\": {\n                \"title\": \"Use cell style function\",\n                \"type\": \"boolean\",\n                \"default\": false\n            },\n            \"cellStyleFunction\": {\n                \"title\": \"Cell style function: f(value)\",\n                \"type\": \"string\",\n                \"default\": \"\"\n            },\n            \"useCellContentFunction\": {\n                \"title\": \"Use cell content function\",\n                \"type\": \"boolean\",\n                \"default\": false\n            },\n            \"cellContentFunction\": {\n                \"title\": \"Cell content function: f(value, rowData)\",\n                \"type\": \"string\",\n                \"default\": \"\"\n            }\n        },\n        \"required\": []\n    },\n    \"form\": [\n        \"columnWidth\",\n        \"useCellStyleFunction\",\n        {\n            \"key\": \"cellStyleFunction\",\n            \"type\": \"javascript\"\n        },\n        \"useCellContentFunction\",\n        {\n            \"key\": \"cellContentFunction\",\n            \"type\": \"javascript\"\n        }\n    ]\n}",
        "defaultConfig": "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"First\",\"color\":\"#2196f3\",\"settings\":{\"showLines\":true,\"fillLines\":true,\"showPoints\":false},\"_hash\":0.8587686344902596,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"},{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Second\",\"color\":\"#ffc107\",\"settings\":{\"columnWidth\":\"0px\"},\"_hash\":0.12775350966079668,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\",\"units\":\"\",\"decimals\":null}]}],\"timewindow\":{\"realtime\":{\"interval\":5000,\"timewindowMs\":60000},\"aggregation\":{\"type\":\"NONE\",\"limit\":100}},\"showTitle\":true,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"8px\",\"settings\":{\"displayPagination\":true,\"defaultPageSize\":10},\"title\":\"Report\",\"dropShadow\":true,\"enableFullscreen\":true,\"titleStyle\":{\"fontSize\":\"16px\",\"fontWeight\":400},\"mobileHeight\":null,\"widgetStyle\":{},\"useDashboardTimewindow\":false,\"showLegend\":false,\"actions\":{},\"units\":\"\",\"decimals\":null,\"displayTimewindow\":true}"
      }
    }
  ]
}