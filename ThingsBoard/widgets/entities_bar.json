{
  "alias": "bar_side_by_side",
  "name": "Entities Bar",
  "descriptor": {
    "type": "latest",
    "sizeX": 7,
    "sizeY": 5,
    "resources": [
      {
        "url": "/assets/chartjs-2.8.0.min.js"
      }
    ],
    "templateHtml": "<canvas class=\"barChart\"></canvas>",
    "templateCss": "",
    "controllerScript": "self.typeParameters = function() {\n    return {\n        maxDatasources: 1\n    };\n};\n\nself.onInit = function() {\n    let attributeService = self.ctx.$scope.$injector.get('attributeService');\n    let barData = {\n        labels: [],\n        datasets: []\n    };\n    \n    self.ctx.datasources[0].dataKeys.forEach(function(dataKey) {\n        barData.datasets.push({\n            label: dataKey.label,\n            data: [],\n            backgroundColor: [],\n            borderColor: [],\n            borderWidth: 1\n        });\n    });\n    \n    self.ctx.datasources.forEach(function(datasource, indexDatasource) {\n        barData.labels[indexDatasource] = datasource.name;\n        if (self.ctx.settings.entityNameAttribute && datasource.entityId) {\n            attributeService.getEntityAttributesValues(datasource.entityType, datasource.entityId, 'SERVER_SCOPE', self.ctx.settings.entityNameAttribute).then(function (attributes) {\n                if (attributes && attributes.length > 0) {\n                    barData.labels[indexDatasource] = attributes[0].value;\n                }\n            });\n        }\n        \n        datasource.dataKeys.forEach(function(dataKey, indexDataKey) {\n            barData.datasets[indexDataKey].data[indexDatasource] = 0;\n            barData.datasets[indexDataKey].backgroundColor[indexDatasource] = self.ctx.datasources[0].dataKeys[indexDataKey].color;\n            barData.datasets[indexDataKey].borderColor[indexDatasource] = self.ctx.datasources[0].dataKeys[indexDataKey].color;\n        });\n    });\n\n    self.ctx.chart = new Chart($('.barChart', self.ctx.$container), {\n        type: 'bar',\n        data: barData,\n        options: {\n            responsive: false,\n            maintainAspectRatio: false,\n            scales: {\n                yAxes: [{\n                    ticks: {\n                        beginAtZero: true\n                    }\n                }]\n            }\n        }\n    });\n    \n    self.onResize();\n};\n\nself.onDataUpdated = function() {\n    self.ctx.data.forEach(function(cellData) {\n        if (cellData.data.length > 0) {\n            let datasetIndex = cellData.datasource.dataKeys.indexOf(cellData.dataKey);\n            let dataIndex = self.ctx.datasources.indexOf(cellData.datasource);\n            \n            self.ctx.chart.data.datasets[datasetIndex].data[dataIndex] = parseFloat(cellData.data[cellData.data.length - 1][1]);\n        }\n    });\n    \n    self.ctx.chart.update();\n};\n\nself.onResize = function() {\n    self.ctx.chart.resize();\n};\n\nself.onDestroy = function() {\n    self.ctx.chart.destroy();\n};\n",
    "settingsSchema": "{\n    \"schema\": {\n        \"type\": \"object\",\n        \"title\": \"Entity Settings\",\n        \"properties\": {\n            \"entityNameAttribute\": {\n                \"title\": \"Use attribute instead of entity name\",\n                \"type\": \"string\",\n                \"default\": \"\"\n            }\n        },\n        \"required\": []\n    },\n    \"form\": [\n        \"entityNameAttribute\"\n    ]\n}",
    "dataKeySettingsSchema": "",
    "defaultConfig": "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"First\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.15479322438769105,\"funcBody\":\"var value = (prevValue-50) + Math.random() * 2 - 1;\\nif (value < 0) {\\n\\tvalue = 0;\\n} else if (value > 100) {\\n\\tvalue = 100;\\n}\\nreturn value+50;\"},{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Second\",\"color\":\"#4caf50\",\"settings\":{},\"_hash\":0.545701115289893,\"funcBody\":\"var value = (prevValue-20) + Math.random() * 2 - 1;\\nif (value < 0) {\\n\\tvalue = 0;\\n} else if (value > 100) {\\n\\tvalue = 100;\\n}\\nreturn value+20;\"},{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Third\",\"color\":\"#f44336\",\"settings\":{},\"_hash\":0.2592906835158064,\"funcBody\":\"var value = (prevValue-40) + Math.random() * 2 - 1;\\nif (value < 0) {\\n\\tvalue = 0;\\n} else if (value > 100) {\\n\\tvalue = 100;\\n}\\nreturn value+40;\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":true,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"8px\",\"settings\":{},\"title\":\"Entities Bar\",\"dropShadow\":true,\"enableFullscreen\":true,\"widgetStyle\":{},\"titleStyle\":{\"fontSize\":\"16px\",\"fontWeight\":400},\"useDashboardTimewindow\":true,\"showLegend\":false,\"actions\":{}}"
  }
}