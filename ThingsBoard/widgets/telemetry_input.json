{
  "alias": "telemetry_update",
  "name": "Telemetry Input",
  "descriptor": {
    "type": "latest",
    "sizeX": 8.5,
    "sizeY": 5.5,
    "resources": [],
    "templateHtml": "<div class=\"form-input-title md-padding\" layout=\"row\">\r\n    <md-input-container flex=\"100\">\r\n        <label>{{entityTitle}}</label>\r\n        <md-select name=\"entity\" ng-model=\"selectedEntity\" required>\r\n            <md-option ng-repeat=\"entity in entities\" ng-value=\"entity\">{{entity.name}}</md-option>\r\n        </md-select>\r\n    </md-input-container>\r\n</div>\r\n\r\n<div class=\"form-input-content\" style=\"overflow: auto;\">\r\n    <md-card ng-repeat=\"key in selectedDataKeys\">\r\n        <md-card-content layout=\"row\" ng-if=\"key.fieldType === 'string'\">\r\n            <md-input-container flex>\r\n                <label>{{key.label}}</label>\r\n                <input name=\"{{key.name}}\" ng-model=\"key.value\" required>\r\n            </md-input-container>\r\n            <md-input-container flex=\"20\">\r\n                <md-button ng-click=\"save(key)\">Save</md-button>\r\n            </md-input-container>\r\n        </md-card-content>\r\n        \r\n        <md-card-content layout=\"row\" ng-if=\"key.fieldType === 'number'\">\r\n            <md-input-container flex>\r\n                <label>{{key.label}}</label>\r\n                <input name=\"{{key.name}}\" type=\"number\" ng-model=\"key.value\" required>\r\n            </md-input-container>\r\n            <md-input-container flex=\"20\">\r\n                <md-button ng-click=\"save(key)\">Save</md-button>\r\n            </md-input-container>\r\n        </md-card-content>\r\n        \r\n        <md-card-content layout=\"row\" ng-if=\"key.fieldType === 'boolean'\">\r\n            <md-input-container flex>\r\n                <md-checkbox ng-model=\"key.value\">{{key.label}}: {{key.value}}</md-checkbox>\r\n            </md-input-container>\r\n            <md-input-container flex=\"20\">\r\n                <md-button ng-click=\"save(key)\">Save</md-button>\r\n            </md-input-container>\r\n        </md-card-content>\r\n        \r\n        <md-card-content layout=\"row\" ng-if=\"key.fieldType === 'datetime'\">\r\n            <md-input-container flex>\r\n                <label>{{key.label}} date</label>\r\n                <input name=\"{{key.name}}\" type=\"date\" ng-model=\"key.value\" required>\r\n            </md-input-container>\r\n            <md-input-container flex>\r\n                <label>time</label>\r\n                <input type=\"time\" ng-model=\"key.value_time\" step=\"1\">\r\n            </md-input-container>\r\n            <md-input-container flex=\"20\">\r\n                <md-button ng-click=\"save(key)\">Save</md-button>\r\n            </md-input-container>\r\n        </md-card-content>\r\n    </md-card>\r\n</div>",
    "templateCss": "",
    "controllerScript": "self.typeParameters = function() {\r\n    return {\r\n        maxDatasources: 1\r\n    };\r\n};\r\n\r\nself.onInit = function() {\r\n    let $http = self.ctx.$scope.$injector.get('$http');\r\n    let $mdDialog = self.ctx.$scope.$injector.get('$mdDialog');\r\n    let attributeService = self.ctx.$scope.$injector.get('attributeService');\r\n    let toast = self.ctx.$scope.$injector.get('toast');\r\n    \r\n    let entities = [];\r\n    let entityTitle = self.ctx.settings.entityTitle||'Entity';\r\n\r\n    self.ctx.datasources.forEach(function(datasource, indexDatasource) {\r\n        if (datasource.entityId) {\r\n            entities[indexDatasource] = {\r\n                id: datasource.entityId,\r\n                name: datasource.name,\r\n                type: datasource.entityType\r\n            };\r\n            \r\n            if (self.ctx.settings.entityNameAttribute) {\r\n                attributeService.getEntityAttributesValues(datasource.entityType, datasource.entityId, 'SERVER_SCOPE', self.ctx.settings.entityNameAttribute).then(function (attributes) {\r\n                    if (attributes && attributes.length > 0) {\r\n                        entities[indexDatasource].name = attributes[0].value;\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    });\r\n\r\n    self.ctx.$scope.save = function(selectedKey) {\r\n        if (!self.ctx.$scope.selectedEntity) {\r\n            $('md-select', self.ctx.$container).removeClass('ng-untouched');\r\n            $('md-select', self.ctx.$container).addClass('ng-touched');\r\n            return;\r\n        }\r\n        \r\n        if (selectedKey.value == null) {\r\n            $('input[name=\"' + selectedKey.name + '\"]', self.ctx.$container).parent('md-input-container').addClass('md-input-invalid');\r\n            return;\r\n        }\r\n        \r\n        let msg = 'Are you sure to update latest telemetry value?';\r\n            msg += '<br><b>' + entityTitle + ':</b> ' + self.ctx.$scope.selectedEntity.name;\r\n            msg += '<br><b>Data Key:</b> ' + selectedKey.label;\r\n        let confirm = $mdDialog.confirm()\r\n          .title('Warning!!!')\r\n          .htmlContent(msg)\r\n          .ok('Yes')\r\n          .cancel('No');\r\n        $mdDialog.show(confirm).then(function() {\r\n            let url = '/api/plugins/telemetry/' + self.ctx.$scope.selectedEntity.type + '/' + self.ctx.$scope.selectedEntity.id + '/timeseries/scope';\r\n            let telemetriesData = {};\r\n            telemetriesData[selectedKey.name] = selectedKey.value;\r\n            \r\n            if (selectedKey.fieldType === 'datetime') {\r\n                if (selectedKey.value_time) {\r\n                    telemetriesData[selectedKey.name] = new Date(selectedKey.value.getFullYear(), selectedKey.value.getMonth(), selectedKey.value.getDate(), selectedKey.value_time.getHours(), selectedKey.value_time.getMinutes(), selectedKey.value_time.getSeconds()).getTime();\r\n                }\r\n                else {\r\n                    telemetriesData[selectedKey.name] = selectedKey.value.getTime();\r\n                }\r\n            }\r\n            \r\n            $http.post(url, telemetriesData).then(\r\n                function(response) {\r\n                    toast.showSuccess('Update successful', 1000, self.ctx.$container, 'bottom left');\r\n                },\r\n                function() {\r\n                    toast.showError('Update failed', self.ctx.$container, 'bottom left');\r\n                }\r\n            );\r\n        });\r\n    };\r\n\r\n    self.ctx.$scope.entities = entities;\r\n    self.ctx.$scope.dataKeys = [];\r\n    self.ctx.$scope.entityTitle = entityTitle;\r\n    self.ctx.$scope.selectedEntity = null;\r\n    self.ctx.$scope.selectedDataKeys = [];\r\n};\r\n\r\nself.onDataUpdated = function() {\r\n    if (self.ctx.$scope.dataKeys.length === 0) {\r\n        let dataKeys = self.ctx.$scope.dataKeys;\r\n        self.ctx.datasources[0].dataKeys.forEach(function(dataKey, indexDataKey) {\r\n            dataKeys[indexDataKey] = {\r\n                name: dataKey.name,\r\n                label: dataKey.label,\r\n                keyType: dataKey.type,\r\n                fieldType: dataKey.settings.fieldType,\r\n                value: null\r\n            };\r\n        });\r\n    \r\n        self.ctx.data.forEach(function(cellData) {\r\n            let datakeyIndex = cellData.datasource.dataKeys.indexOf(cellData.dataKey);\r\n            if (!dataKeys[datakeyIndex].fieldType) {\r\n                if (cellData.data.length > 0) {\r\n                    let cellValue = cellData.data[cellData.data.length - 1][1];\r\n                    if (typeof cellValue === 'number') {\r\n                        dataKeys[datakeyIndex].fieldType = 'number';\r\n                    }\r\n                    else if (typeof cellValue === 'boolean') {\r\n                        dataKeys[datakeyIndex].fieldType = 'boolean';\r\n                    }\r\n                    else {\r\n                        dataKeys[datakeyIndex].fieldType = 'string';\r\n                    }\r\n                }\r\n                else {\r\n                    dataKeys[datakeyIndex].fieldType = 'string';\r\n                }\r\n            }\r\n        });\r\n    \r\n        dataKeys.forEach(function(dataKey) {\r\n            if (dataKey.fieldType === 'boolean') {\r\n                dataKey.value = false;\r\n            }\r\n        });\r\n        \r\n        self.ctx.$scope.selectedDataKeys = dataKeys.filter(function(dataKey) {\r\n            return dataKey.keyType === 'timeseries';\r\n        });\r\n        \r\n        self.onResize();\r\n    }\r\n};\r\n\r\nself.onResize = function() {\r\n    $('.form-input-content', self.ctx.$container).height(self.ctx.$container.height() - $('.form-input-title', self.ctx.$container).height() - 40);\r\n};\r\n",
    "settingsSchema": "{\n    \"schema\": {\n        \"type\": \"object\",\n        \"title\": \"Entity Settings\",\n        \"properties\": {\n            \"entityTitle\": {\n                \"title\": \"Entities title\",\n                \"type\": \"string\",\n                \"default\": \"\"\n            },\n            \"entityNameAttribute\": {\n                \"title\": \"Use attribute instead of entity name\",\n                \"type\": \"string\",\n                \"default\": \"\"\n            }\n        },\n        \"required\": []\n    },\n    \"form\": [\n        \"entityTitle\",\n        \"entityNameAttribute\"\n    ]\n}",
    "dataKeySettingsSchema": "{\n    \"schema\": {\n        \"type\": \"object\",\n        \"title\": \"DataKeySettings\",\n        \"properties\": {\n            \"fieldType\": {\n                \"title\": \"Field Type (string, number, boolean, datetime)\",\n                \"type\": \"string\",\n                \"default\": \"\"\n            }\n        },\n        \"required\": []\n    },\n    \"form\": [\n        \"fieldType\"\n    ]\n}",
    "defaultConfig": "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.15479322438769105,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":true,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"8px\",\"settings\":{},\"title\":\"Telemetry Input\"}"
  }
}