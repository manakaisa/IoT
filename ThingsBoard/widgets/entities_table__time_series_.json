{
  "alias": "entities_table_timeseries_",
  "name": "Entities Table (time series)",
  "descriptor": {
    "type": "timeseries",
    "sizeX": 8,
    "sizeY": 6.5,
    "resources": [
      {
        "url": "http://192.168.194.130:1880/datatables/css/jquery.datatables-1.10.18.min.css"
      },
      {
        "url": "http://192.168.194.130:1880/datatables/css/buttons-1.5.6.min.css"
      },
      {
        "url": "http://192.168.194.130:1880/jszip-2.5.0.min.js"
      },
      {
        "url": "http://192.168.194.130:1880/datatables/js/jquery.datatables-1.10.18.min.js"
      },
      {
        "url": "http://192.168.194.130:1880/datatables/js/buttons-1.5.6.min.js"
      },
      {
        "url": "http://192.168.194.130:1880/datatables/js/buttons.html5-1.5.6.min.js"
      }
    ],
    "templateHtml": "<table class=\"display compact\" width=\"100%\"></table>",
    "templateCss": "",
    "controllerScript": "self.typeParameters = function() {\n    return {\n        maxDatasources: 1\n    };\n}\n\nself.onInit = function() {\n    let attributeService = self.ctx.$scope.$injector.get('attributeService');\n    let columns = [];\n    let dataSet = [];\n    \n    columns[0] = { title: self.ctx.settings.entityColumnTitle||'Entities' };\n    self.ctx.datasources[0].dataKeys.forEach(function(dataKey, indexDataKey) {\n        let cellStyleFunction = new Function('value', dataKey.settings.cellStyleFunction);\n        let cellContentFunction = new Function('value', 'rowData', dataKey.settings.cellContentFunction);\n        \n        columns[indexDataKey + 1] = {\n            title: dataKey.label,\n            searchable: false,\n            createdCell: function (td, data) {\n                if(dataKey.settings.useCellStyleFunction) {\n                    try {\n                        let styles = cellStyleFunction(data);\n                        if (styles) {\n                            $(td).css(styles);\n                        }\n                    }\n                    catch (e) {}\n                }\n            },\n            render: function (data, type, rowData, meta) {\n                if (type === 'display') {\n                    if (dataKey.settings.useCellContentFunction) {\n                        try {\n                            return cellContentFunction(data, rowData);\n                        }\n                        catch (e) {}\n                    } \n                    else if (typeof data === 'number') {\n                        let decimals = self.ctx.decimals||(data.toString().split('.')[1]||'').length;\n                        let units = self.ctx.units;\n                        if (dataKey.decimals || dataKey.decimals === 0) {\n                            decimals = dataKey.decimals;\n                        }\n                        if (dataKey.units) {\n                            units = dataKey.units;\n                        }\n                        return self.ctx.utils.formatValue(data, decimals, units, true);\n                    } \n                }\n                return data;\n            }\n        };\n    });\n\n    self.ctx.datasources.forEach(function(datasource, indexDatasource) {\n        dataSet[indexDatasource] = [];\n        \n        dataSet[indexDatasource][0] = datasource.name;\n        if (self.ctx.settings.entityNameAttribute && datasource.entityId) {\n            attributeService.getEntityAttributesValues(datasource.entityType, datasource.entityId, 'SERVER_SCOPE', self.ctx.settings.entityNameAttribute).then(function (attributes) {\n                if (attributes && attributes.length > 0) {\n                    dataSet[indexDatasource][0] = attributes[0].value;\n                }\n            });\n        }\n        \n        self.ctx.datasources[indexDatasource].dataKeys.forEach(function(dataKey, indexDataKey) {\n            dataSet[indexDatasource][indexDataKey + 1] = null;\n        });\n    });\n    \n    self.ctx.columns = columns;\n    self.ctx.dataSet = dataSet;\n    self.ctx.datatable = $('table', self.ctx.$container).DataTable({\n        data: dataSet,\n        columns: columns,\n        searching: self.ctx.settings.enableSearch,\n        paging: self.ctx.settings.displayPagination,\n        lengthChange: false,\n        pageLength: self.ctx.settings.defaultPageSize,\n        scrollX: true,\n        scrollY: \"50px\",\n        scrollCollapse: true,\n        buttons: [\n           {\n                extend: 'excelHtml5',\n                filename: self.ctx.widgetConfig.title || 'Entities table',\n                title: null,\n                exportOptions: {\n                    orthogonal: 'data'\n                }\n            }\n        ]\n    });\n    \n    self.ctx.datatable.button(0).container().prependTo(self.ctx.datatable.table().container());\n    self.onResizeScrollY();\n}\n\nself.onDataUpdated = function() {\n    if (!self.ctx.defaultSubscription.subscriptionTimewindow) {\n        return;\n    }\n    \n    self.ctx.data.forEach(function(cellData) {\n        if (cellData.data.length > 0) {\n            let datasourceIndex =  self.ctx.datasources.indexOf(cellData.datasource);\n            let datakeyIndex = cellData.datasource.dataKeys.indexOf(cellData.dataKey);\n            let cellValue = null;\n\n            switch(self.ctx.defaultSubscription.subscriptionTimewindow.aggregation.type) {\n              case 'MIN':\n                cellValue = cellData.data\n                    .map(function(data) {\n                        return data[1];\n                    })\n                    .reduce(function(lastData, currentData) {\n                        return (lastData<currentData)?lastData:currentData;\n                    });\n                break;\n              case 'MAX':\n                cellValue = cellData.data\n                    .map(function(data) {\n                        return data[1];\n                    })\n                    .reduce(function(lastData, currentData) {\n                        return (lastData>currentData)?lastData:currentData;\n                    });\n                break;\n              case 'AVG':\n                cellValue = cellData.data\n                    .map(function(data) {\n                        return data[1];\n                    })\n                    .reduce(function (lastData, currentData) {\n                        lastData += currentData;\n                        return lastData;\n                    })/cellData.data.length;\n                break;\n              case 'SUM':\n                cellValue = cellData.data\n                    .map(function(data) {\n                        return data[1];\n                    })\n                    .reduce(function (lastData, currentData) {\n                        lastData += currentData;\n                        return lastData;\n                    });\n                break;\n              case 'COUNT':\n                cellValue = cellData.data\n                    .map(function(data) {\n                        return data[1];\n                    })\n                    .reduce(function (lastData, currentData) {\n                        lastData += currentData;\n                        return lastData;\n                    });\n                break;\n              default:\n                cellValue = cellData.data[cellData.data.length - 1][1];\n            }\n            \n            self.ctx.dataSet[datasourceIndex][datakeyIndex + 1] = cellValue;\n        }\n    });\n    \n    self.ctx.datatable.rows().invalidate().draw(false);\n}\n\nself.onResize = function() {\n    self.onResizeScrollY();\n    \n    self.ctx.datatable.draw('page');\n}\n\nself.onResizeScrollY = function() {\n    let $tableContainer = $(self.ctx.datatable.table().container());\n    let scrollY = self.ctx.$container.height() - ($tableContainer.height() - $('.dataTables_scrollBody', $tableContainer).outerHeight()) - 10;\n    scrollY = (scrollY>50)?scrollY:50;\n    $('.dataTables_scrollBody', $tableContainer).css('maxHeight', scrollY + 'px');\n}\n\nself.onDestroy = function() {\n    self.ctx.datatable.destroy();\n}\n",
    "settingsSchema": "{\n    \"schema\": {\n        \"type\": \"object\",\n        \"title\": \"Entity Settings\",\n        \"properties\": {\n            \"entityColumnTitle\": {\n                \"title\": \"Entities column title\",\n                \"type\": \"string\",\n                \"default\": \"\"\n            },\n            \"entityNameAttribute\": {\n                \"title\": \"Use attribute instead of entity name\",\n                \"type\": \"string\",\n                \"default\": \"\"\n            },\n            \"enableSearch\": {\n                \"title\": \"Enable entities search\",\n                \"type\": \"boolean\",\n                \"default\": true\n            },\n            \"displayPagination\": {\n                \"title\": \"Display pagination\",\n                \"type\": \"boolean\",\n                \"default\": true\n            },\n            \"defaultPageSize\": {\n                \"title\": \"Default page size\",\n                \"type\": \"number\",\n                \"default\": 10\n            }\n        },\n        \"required\": []\n    },\n    \"form\": [\n        \"entityColumnTitle\",\n        \"entityNameAttribute\",\n        \"enableSearch\",\n        \"displayPagination\",\n        \"defaultPageSize\"\n    ]\n}",
    "dataKeySettingsSchema": "{\n    \"schema\": {\n        \"type\": \"object\",\n        \"title\": \"DataKeySettings\",\n        \"properties\": {\n            \"useCellStyleFunction\": {\n                \"title\": \"Use cell style function\",\n                \"type\": \"boolean\",\n                \"default\": false\n            },\n            \"cellStyleFunction\": {\n                \"title\": \"Cell style function: f(value)\",\n                \"type\": \"string\",\n                \"default\": \"\"\n            },\n            \"useCellContentFunction\": {\n                \"title\": \"Use cell content function\",\n                \"type\": \"boolean\",\n                \"default\": false\n            },\n            \"cellContentFunction\": {\n                \"title\": \"Cell content function: f(value, rowData)\",\n                \"type\": \"string\",\n                \"default\": \"\"\n            }\n        },\n        \"required\": []\n    },\n    \"form\": [\n        \"useCellStyleFunction\",\n        {\n            \"key\": \"cellStyleFunction\",\n            \"type\": \"javascript\"\n        },\n        \"useCellContentFunction\",\n        {\n            \"key\": \"cellContentFunction\",\n            \"type\": \"javascript\"\n        }\n    ]\n}",
    "defaultConfig": "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"First\",\"color\":\"#2196f3\",\"settings\":{\"showLines\":true,\"fillLines\":true,\"showPoints\":false},\"_hash\":0.8587686344902596,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"},{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Second\",\"color\":\"#ffc107\",\"settings\":{\"columnWidth\":\"0px\"},\"_hash\":0.12775350966079668,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\",\"units\":\"\",\"decimals\":null}]}],\"timewindow\":{\"realtime\":{\"interval\":5000,\"timewindowMs\":60000},\"aggregation\":{\"type\":\"NONE\",\"limit\":100}},\"showTitle\":true,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"8px\",\"settings\":{\"enableSearch\":true,\"displayPagination\":true,\"defaultPageSize\":10},\"title\":\"Entities Table (time series)\",\"dropShadow\":true,\"enableFullscreen\":true,\"titleStyle\":{\"fontSize\":\"16px\",\"fontWeight\":400},\"mobileHeight\":null,\"widgetStyle\":{},\"useDashboardTimewindow\":false,\"showLegend\":false,\"actions\":{},\"units\":\"\",\"decimals\":null,\"displayTimewindow\":true}"
  }
}