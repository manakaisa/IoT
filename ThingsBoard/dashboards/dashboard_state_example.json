{
  "title": "Dashboard State Example",
  "configuration": {
    "widgets": {
      "f913ab92-d50c-1cd8-97e9-e2f88b223092": {
        "isSystemType": true,
        "bundleAlias": "cards",
        "typeAlias": "entities_hierarchy",
        "type": "latest",
        "title": "New widget",
        "sizeX": 7.5,
        "sizeY": 3.5,
        "config": {
          "timewindow": {
            "realtime": {
              "interval": 1000,
              "timewindowMs": 86400000
            },
            "aggregation": {
              "type": "NONE",
              "limit": 200
            }
          },
          "showTitle": true,
          "backgroundColor": "rgb(255, 255, 255)",
          "color": "rgba(0, 0, 0, 0.87)",
          "padding": "4px",
          "settings": {
            "nodeRelationQueryFunction": "/**\n\n// Function should return relations query object for current node used to fetch entity children.\n// Function can return 'default' string value. In this case default relations query will be used.\n\n// The following example code will construct simple relations query that will fetch relations of type 'Contains'\n// from the current entity.\n\nvar entity = nodeCtx.entity;\nvar query = {\n    parameters: {\n        rootId: entity.id.id,\n        rootType: entity.id.entityType,\n        direction: types.entitySearchDirection.from,\n        relationTypeGroup: \"COMMON\",\n        maxLevel: 1\n    },\n    filters: [{\n        relationType: \"Contains\",\n        entityTypes: []\n    }]\n};\nreturn query;\n\n**/\n",
            "nodeHasChildrenFunction": "/**\n\n// Function should return boolean value indicating whether current node has children (whether it can be expanded).\n\n// The following example code will restrict entities hierarchy expansion up to third level.\n\nreturn nodeCtx.level <= 2;\n\n// The next example code will restrict entities expansion according to the value of example 'nodeHasChildren' attribute.\n\nvar data = nodeCtx.data;\nif (data.hasOwnProperty('nodeHasChildren') && data['nodeHasChildren'] !== null) {\n    return data['nodeHasChildren'] === 'true';\n} else {\n    return true;\n}\n  \n**/\n ",
            "nodeTextFunction": "/**\n\n// Function should return text (can be HTML code) for the current node.\n\n// The following example code will generate node text consisting of entity name and temperature if temperature value is present in entity attributes/timeseries.\n\nvar data =  nodeCtx.data;\nvar entity = nodeCtx.entity;\nvar text = entity.name;\nif (data.hasOwnProperty('temperature') && data['temperature'] !== null) {\n    text += \" <b>\"+ data['temperature'] +\" Â°C</b>\";\n}\nreturn text;\n\n**/",
            "nodeIconFunction": "/** \n\n// Function should return node icon info object.\n// Resulting object should contain either 'materialIcon' or 'iconUrl' property. \n// Where:\n    - 'materialIcon' - name of the material icon to be used from the Material Icons Library (https://material.io/tools/icons);\n    - 'iconUrl' - url of the external image to be used as node icon.\n// Function can return 'default' string value. In this case default icons according to entity type will be used.\n\n// The following example code shows how to use external image for devices which name starts with 'Test' and use \n// default icons for the rest of entities.\n\nvar entity = nodeCtx.entity;\nif (entity.id.entityType === 'DEVICE' && entity.name.startsWith('Test')) {\n    return {iconUrl: 'https://avatars1.githubusercontent.com/u/14793288?v=4&s=117'};\n} else {\n    return 'default';\n}\n \n**/",
            "nodeDisabledFunction": "/**\n\n// Function should return boolean value indicating whether current node should be disabled (not selectable).\n\n// The following example code will disable current node according to the value of example 'nodeDisabled' attribute.\n\nvar data = nodeCtx.data;\nif (data.hasOwnProperty('nodeDisabled') && data['nodeDisabled'] !== null) {\n    return data['nodeDisabled'] === 'true';\n} else {\n    return false;\n}\n  \n**/\n",
            "nodesSortFunction": "/**\n\n// This function is used to sort nodes of the same level. Function should compare two nodes and return \n// integer value: \n//     - less than 0 - sort nodeCtx1 to an index lower than nodeCtx2\n//     - 0 - leave nodeCtx1 and nodeCtx2 unchanged with respect to each other\n//     - greater than 0 - sort nodeCtx2 to an index lower than nodeCtx1\n\n// The following example code will sort entities first by entity type in alphabetical order then\n// by entity name in alphabetical order.\n\nvar result = nodeCtx1.entity.id.entityType.localeCompare(nodeCtx2.entity.id.entityType);\nif (result === 0) {\n    result = nodeCtx1.entity.name.localeCompare(nodeCtx2.entity.name);\n}\nreturn result;\n  \n**/",
            "nodeOpenedFunction": "/**\n\n// Function should return boolean value indicating whether current node should be opened (expanded) when it first loaded.\n\n// The following example code will open by default nodes up to third level.\n\nreturn nodeCtx.level <= 2;\n\n**/\n "
          },
          "title": "Workgroup",
          "dropShadow": true,
          "enableFullscreen": true,
          "titleStyle": {
            "fontSize": "16px",
            "fontWeight": 400,
            "padding": "5px 10px 5px 10px"
          },
          "useDashboardTimewindow": false,
          "showLegend": false,
          "datasources": [
            {
              "type": "entity",
              "dataKeys": [],
              "entityAliasId": "7bc38f1d-3dc6-59f5-adb6-e0c48e14e458"
            }
          ],
          "widgetStyle": {},
          "actions": {
            "nodeSelected": [
              {
                "id": "f7e1d8e4-08c9-18fc-db54-c575e0efa51d",
                "name": "test",
                "icon": "more_horiz",
                "type": "openDashboardState",
                "targetDashboardStateId": "workers",
                "setEntityId": true
              }
            ]
          },
          "displayTimewindow": true
        },
        "id": "f913ab92-d50c-1cd8-97e9-e2f88b223092"
      },
      "2dcef2fd-94f5-172b-a27e-7920f0825500": {
        "isSystemType": true,
        "bundleAlias": "cards",
        "typeAlias": "entities_table",
        "type": "latest",
        "title": "New widget",
        "sizeX": 7.5,
        "sizeY": 6.5,
        "config": {
          "timewindow": {
            "realtime": {
              "interval": 1000,
              "timewindowMs": 86400000
            },
            "aggregation": {
              "type": "NONE",
              "limit": 200
            }
          },
          "showTitle": true,
          "backgroundColor": "rgb(255, 255, 255)",
          "color": "rgba(0, 0, 0, 0.87)",
          "padding": "4px",
          "settings": {
            "enableSearch": true,
            "displayPagination": true,
            "defaultPageSize": 10,
            "defaultSortOrder": "entityName",
            "displayEntityName": true,
            "displayEntityType": true
          },
          "title": "New Entities table",
          "dropShadow": true,
          "enableFullscreen": true,
          "titleStyle": {
            "fontSize": "16px",
            "fontWeight": 400,
            "padding": "5px 10px 5px 10px"
          },
          "useDashboardTimewindow": false,
          "showLegend": false,
          "datasources": [
            {
              "type": "entity",
              "dataKeys": [
                {
                  "name": "name",
                  "type": "attribute",
                  "label": "name",
                  "color": "#2196f3",
                  "settings": {
                    "columnWidth": "0px",
                    "useCellStyleFunction": false,
                    "cellStyleFunction": "",
                    "useCellContentFunction": false,
                    "cellContentFunction": ""
                  },
                  "_hash": 0.13674776725209004
                }
              ],
              "entityAliasId": "1e4a417f-a45e-faf8-a4d6-7cb07efa2cb9"
            }
          ],
          "widgetStyle": {},
          "displayTimewindow": true,
          "actions": {
            "rowClick": [
              {
                "id": "46106034-f622-d9fc-81d3-fb75581c1fc4",
                "name": "test",
                "icon": "more_horiz",
                "type": "openDashboardState",
                "targetDashboardStateId": "worker",
                "setEntityId": true
              }
            ]
          }
        },
        "id": "2dcef2fd-94f5-172b-a27e-7920f0825500"
      },
      "7d29d56f-22f6-8f0d-5c8c-26183829a834": {
        "isSystemType": true,
        "bundleAlias": "cards",
        "typeAlias": "attributes_card",
        "type": "latest",
        "title": "New widget",
        "sizeX": 7.5,
        "sizeY": 3,
        "config": {
          "datasources": [
            {
              "type": "entity",
              "dataKeys": [
                {
                  "name": "name",
                  "type": "attribute",
                  "label": "name",
                  "color": "#2196f3",
                  "settings": {},
                  "_hash": 0.13088084421055957
                },
                {
                  "name": "count_in",
                  "type": "timeseries",
                  "label": "count_in",
                  "color": "#4caf50",
                  "settings": {},
                  "_hash": 0.2930637877568567
                },
                {
                  "name": "count_success",
                  "type": "timeseries",
                  "label": "count_success",
                  "color": "#f44336",
                  "settings": {},
                  "_hash": 0.7064959846239605
                },
                {
                  "name": "count_fail",
                  "type": "timeseries",
                  "label": "count_fail",
                  "color": "#ffc107",
                  "settings": {},
                  "_hash": 0.9574260761788627
                }
              ],
              "entityAliasId": "e54f0b92-730b-65a3-a735-a9c7024d0cec"
            }
          ],
          "timewindow": {
            "realtime": {
              "timewindowMs": 60000
            }
          },
          "showTitle": true,
          "backgroundColor": "#fff",
          "color": "rgba(0, 0, 0, 0.87)",
          "padding": "8px",
          "settings": {},
          "title": "Attributes",
          "dropShadow": true,
          "enableFullscreen": true,
          "widgetStyle": {},
          "titleStyle": {
            "fontSize": "16px",
            "fontWeight": 400
          },
          "useDashboardTimewindow": true,
          "displayTimewindow": true,
          "showLegend": false,
          "actions": {}
        },
        "id": "7d29d56f-22f6-8f0d-5c8c-26183829a834"
      }
    },
    "states": {
      "workgroup": {
        "name": "Workgroup",
        "root": true,
        "layouts": {
          "main": {
            "widgets": {
              "f913ab92-d50c-1cd8-97e9-e2f88b223092": {
                "sizeX": 7,
                "sizeY": 3,
                "row": 0,
                "col": 0
              }
            },
            "gridSettings": {
              "backgroundColor": "#eeeeee",
              "color": "rgba(0,0,0,0.870588)",
              "columns": 24,
              "margins": [
                10,
                10
              ],
              "backgroundSizeMode": "100%"
            }
          }
        }
      },
      "workers": {
        "name": "Workers",
        "root": false,
        "layouts": {
          "main": {
            "widgets": {
              "2dcef2fd-94f5-172b-a27e-7920f0825500": {
                "sizeX": 7,
                "sizeY": 6,
                "row": 0,
                "col": 0
              }
            },
            "gridSettings": {
              "backgroundColor": "#eeeeee",
              "color": "rgba(0,0,0,0.870588)",
              "columns": 24,
              "margins": [
                10,
                10
              ],
              "backgroundSizeMode": "100%"
            }
          }
        }
      },
      "worker": {
        "name": "Worker",
        "root": false,
        "layouts": {
          "main": {
            "widgets": {
              "7d29d56f-22f6-8f0d-5c8c-26183829a834": {
                "sizeX": 7,
                "sizeY": 3,
                "row": 0,
                "col": 0
              }
            },
            "gridSettings": {
              "backgroundColor": "#eeeeee",
              "color": "rgba(0,0,0,0.870588)",
              "columns": 24,
              "margins": [
                10,
                10
              ],
              "backgroundSizeMode": "100%"
            }
          }
        }
      }
    },
    "entityAliases": {
      "7bc38f1d-3dc6-59f5-adb6-e0c48e14e458": {
        "id": "7bc38f1d-3dc6-59f5-adb6-e0c48e14e458",
        "alias": "Workgroup",
        "filter": {
          "type": "singleEntity",
          "resolveMultiple": false,
          "singleEntity": {
            "entityType": "ASSET",
            "id": "cfb5a9b0-afa3-11e9-b546-57b55a0f7f3e"
          }
        }
      },
      "e54f0b92-730b-65a3-a735-a9c7024d0cec": {
        "id": "e54f0b92-730b-65a3-a735-a9c7024d0cec",
        "alias": "Worker",
        "filter": {
          "type": "stateEntity",
          "resolveMultiple": false,
          "stateEntityParamName": null,
          "defaultStateEntity": null
        }
      },
      "1e4a417f-a45e-faf8-a4d6-7cb07efa2cb9": {
        "id": "1e4a417f-a45e-faf8-a4d6-7cb07efa2cb9",
        "alias": "Workers",
        "filter": {
          "type": "relationsQuery",
          "resolveMultiple": true,
          "rootStateEntity": true,
          "stateEntityParamName": null,
          "defaultStateEntity": null,
          "rootEntity": null,
          "direction": "FROM",
          "maxLevel": 1,
          "filters": [
            {
              "relationType": "WORKGROUP",
              "entityTypes": [
                "ASSET"
              ]
            }
          ]
        }
      }
    },
    "timewindow": {
      "realtime": {
        "interval": 1000,
        "timewindowMs": 3600000
      },
      "aggregation": {
        "type": "NONE",
        "limit": 100
      }
    },
    "settings": {
      "stateControllerId": "entity",
      "showTitle": true,
      "showDashboardsSelect": true,
      "showEntitiesSelect": true,
      "showDashboardTimewindow": true,
      "showDashboardExport": true,
      "toolbarAlwaysOpen": true,
      "titleColor": "rgba(0,0,0,0.870588)"
    }
  },
  "name": "Dashboard State Example"
}