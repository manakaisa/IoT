{
  "widgetsBundle": {
    "alias": "x_widgets",
    "title": "X-widgets",
    "image": null
  },
  "widgetTypes": [
    {
      "alias": "daily_report",
      "name": "Daily Report",
      "descriptor": {
        "type": "timeseries",
        "sizeX": 8,
        "sizeY": 6.5,
        "resources": [
          {
            "url": "http://27.254.81.229:1880/assets/datatables/css/jquery.datatables-1.10.18.min.css"
          },
          {
            "url": "http://27.254.81.229:1880/assets/datatables/css/buttons-1.5.6.min.css"
          },
          {
            "url": "http://27.254.81.229:1880/assets/jszip-2.5.0.min.js"
          },
          {
            "url": "http://27.254.81.229:1880/assets/datatables/js/jquery.datatables-1.10.18.min.js"
          },
          {
            "url": "http://27.254.81.229:1880/assets/datatables/js/buttons-1.5.6.min.js"
          },
          {
            "url": "http://27.254.81.229:1880/assets/datatables/js/buttons.html5-1.5.6.min.js"
          }
        ],
        "templateHtml": "<table class=\"display compact\" width=\"100%\"></table>",
        "templateCss": "",
        "controllerScript": "self.typeParameters = function() {\n    return {\n        maxDatasources: 1\n    };\n};\n\nself.onInit = function() {\n    let attributeService = self.ctx.$scope.$injector.get('attributeService');\n    let columns = [];\n    let dataSet = [];\n    \n    columns[0] = { \n        title: self.ctx.settings.entityColumnTitle||'Entities',\n        width: self.ctx.settings.entityColumnWidth||null\n    };\n    columns[1] = { \n        title: self.ctx.settings.keyColumnTitle||'Keys',\n        width: self.ctx.settings.keyColumnWidth||null,\n        searchable: false,\n        orderable: false\n    };\n\n    self.ctx.datasources.forEach(function(datasource, indexDatasource) {\n        self.ctx.datasources[indexDatasource].dataKeys.forEach(function(dataKey, indexDataKey) {\n            let entityIndex = (indexDatasource * self.ctx.datasources[indexDatasource].dataKeys.length) + indexDataKey;\n            dataSet[entityIndex] = [];\n            dataSet[entityIndex][0] = datasource.name;\n            dataSet[entityIndex][1] = dataKey.label;\n        });\n        \n        if (self.ctx.settings.entityNameAttribute && datasource.entityId) {\n            attributeService.getEntityAttributesValues(datasource.entityType, datasource.entityId, 'SERVER_SCOPE', self.ctx.settings.entityNameAttribute).then(function (attributes) {\n                if (attributes && attributes.length > 0) {\n                    self.ctx.datasources[indexDatasource].dataKeys.forEach(function(dataKey, indexDataKey) {\n                        let entityIndex = (indexDatasource * self.ctx.datasources[indexDatasource].dataKeys.length) + indexDataKey;\n                        dataSet[entityIndex][0] = attributes[0].value;\n                    });\n                }\n            });\n        }\n    });\n    \n    self.ctx.columns = columns;\n    self.ctx.dataSet = dataSet;\n    self.ctx.periods = [];\n    self.ctx.datatable = null;\n};\n\nself.reloadDatatable = function() {\n    if (self.ctx.datatable) {\n        self.ctx.datatable.destroy();\n        $('table', self.ctx.$container).empty();\n    }\n    \n    self.ctx.columns = [self.ctx.columns[0], self.ctx.columns[1]];\n    self.ctx.dataSet.forEach(function(data) {\n        data = [data[0], data[1]];\n    });\n    self.ctx.periods = [];\n    \n    let periodsDisplay = [];\n    let dateStart = moment(self.ctx.defaultSubscription.timeWindow.minTime);\n    let dateEnd = moment(self.ctx.defaultSubscription.timeWindow.maxTime);\n    let daysDiff = dateEnd.diff(dateStart, 'days');\n    for(let i=0;i<=daysDiff;i++) {\n        self.ctx.periods[i] = dateStart.format('YYYY-MM-DD');\n        periodsDisplay[i] = dateStart.format(self.ctx.settings.periodColumnFormat||'YYYY-MM-DD');\n        dateStart.add(1, 'days');\n    }\n    \n    let cellStyleFunctions = [];\n    let cellContentFunctions = [];\n    self.ctx.datasources[0].dataKeys.forEach(function(dataKey, indexDataKey) {\n        cellStyleFunctions[indexDataKey] = new Function('value', dataKey.settings.cellStyleFunction);\n        cellContentFunctions[indexDataKey] = new Function('value', 'rowData', dataKey.settings.cellContentFunction);\n    });\n    \n    self.ctx.periods.forEach(function(period, indexPeriod) {\n        self.ctx.columns[indexPeriod + 2] = {\n            title: periodsDisplay[indexPeriod],\n            searchable: false,\n            orderable: false,\n            createdCell: function (td, data, rowData, rowIndex, colIndex) {\n                let keyIndex = rowIndex % self.ctx.datasources[0].dataKeys.length;\n                let dataKey = self.ctx.datasources[0].dataKeys[keyIndex];\n                if(dataKey.settings.useCellStyleFunction) {\n                    try {\n                        let styles = cellStyleFunctions[keyIndex](data);\n                        if (styles) {\n                            $(td).css(styles);\n                        }\n                    }\n                    catch (e) {}\n                }\n            },\n            render: function (data, type, rowData, meta) {\n                if (type === 'display') {\n                    let keyIndex = meta.row % self.ctx.datasources[0].dataKeys.length;\n                    let dataKey = self.ctx.datasources[0].dataKeys[keyIndex];\n                    if (dataKey.settings.useCellContentFunction) {\n                        try {\n                            return cellContentFunctions[keyIndex](data, rowData);\n                        }\n                        catch (e) {}\n                    } \n                    else if (typeof data === 'number') {\n                        let decimals = self.ctx.decimals||(data.toString().split('.')[1]||'').length;\n                        let units = self.ctx.units;\n                        if (dataKey.decimals || dataKey.decimals === 0) {\n                            decimals = dataKey.decimals;\n                        }\n                        if (dataKey.units) {\n                            units = dataKey.units;\n                        }\n                        return self.ctx.utils.formatValue(data, decimals, units, true);\n                    } \n                }\n                return data;\n            }\n        };\n    });\n    \n    self.ctx.dataSet.forEach(function(data, indexData) {\n        self.ctx.periods.forEach(function(period, indexPeriod) {\n            self.ctx.dataSet[indexData][indexPeriod + 2] = null;\n        });\n    });\n    \n    let stripeClasses = [];\n    self.ctx.datasources[0].dataKeys.forEach(function(dataKey, indexDataKey) {\n        stripeClasses[indexDataKey] = 'odd';\n        stripeClasses[indexDataKey + self.ctx.datasources[0].dataKeys.length] = 'even';\n    });\n    \n    self.ctx.datatable = $('table', self.ctx.$container).DataTable({\n        data: self.ctx.dataSet,\n        columns: self.ctx.columns,\n        searching: self.ctx.settings.enableSearch,\n        paging: self.ctx.settings.displayPagination,\n        lengthChange: false,\n        pageLength: self.ctx.settings.defaultEntityPageSize * self.ctx.datasources[0].dataKeys.length,\n        scrollX: true,\n        scrollCollapse: true,\n        stripeClasses: stripeClasses,\n        buttons: [\n           {\n                extend: 'excelHtml5',\n                filename: self.ctx.widgetConfig.title || 'Daily Report',\n                title: null,\n                exportOptions: {\n                    orthogonal: 'data'\n                }\n            }\n        ]\n    });\n    \n    self.ctx.datatable.button(0).container().prependTo(self.ctx.datatable.table().container());\n    self.onResizeScrollY();\n    \n    self.ctx.currentSubscriptionTimewindow = self.ctx.defaultSubscription.subscriptionTimewindow;\n};\n\nself.onDataUpdated = function() {\n    if (!self.ctx.defaultSubscription.subscriptionTimewindow) {\n        return;\n    }\n    \n    if (!self.ctx.datatable) {\n        self.reloadDatatable();\n    }\n    \n    if (self.ctx.currentSubscriptionTimewindow != self.ctx.defaultSubscription.subscriptionTimewindow) {\n        self.reloadDatatable();\n    }\n    \n    self.ctx.data.forEach(function(cellData) {\n        let datasourceIndex =  self.ctx.datasources.indexOf(cellData.datasource);\n        let datakeyIndex = cellData.datasource.dataKeys.indexOf(cellData.dataKey);\n        let rowIndex = (datasourceIndex * cellData.datasource.dataKeys.length) + datakeyIndex;\n        let periodData = {};\n      \n        cellData.data.forEach(function (data) {\n            let period = moment(data[0]).format('YYYY-MM-DD');\n            if (!periodData[period]) {\n                periodData[period] = [];\n            }\n            periodData[period].push(data);\n        });\n\n        for (let period in periodData) {\n            let cellPeriodData = periodData[period];\n            let periodIndex = self.ctx.periods.indexOf(period);\n            let cellValue = null;\n\n            switch(self.ctx.defaultSubscription.subscriptionTimewindow.aggregation.type) {\n              case 'MIN':\n                cellValue = cellPeriodData\n                    .map(function(data) {\n                        return data[1];\n                    })\n                    .reduce(function(lastData, currentData) {\n                        return (lastData<currentData)?lastData:currentData;\n                    });\n                break;\n              case 'MAX':\n                cellValue = cellPeriodData\n                    .map(function(data) {\n                        return data[1];\n                    })\n                    .reduce(function(lastData, currentData) {\n                        return (lastData>currentData)?lastData:currentData;\n                    });\n                break;\n              case 'AVG':\n                cellValue = cellPeriodData\n                    .map(function(data) {\n                        return data[1];\n                    })\n                    .reduce(function (lastData, currentData) {\n                        lastData += currentData;\n                        return lastData;\n                    })/cellData.data.length;\n                break;\n              case 'SUM':\n                cellValue = cellPeriodData\n                    .map(function(data) {\n                        return data[1];\n                    })\n                    .reduce(function (lastData, currentData) {\n                        lastData += currentData;\n                        return lastData;\n                    });\n                break;\n              case 'COUNT':\n                cellValue = cellPeriodData\n                    .map(function(data) {\n                        return data[1];\n                    })\n                    .reduce(function (lastData, currentData) {\n                        lastData += currentData;\n                        return lastData;\n                    });\n                break;\n              default:\n                cellValue = cellPeriodData[cellPeriodData.length - 1][1];\n            }\n            \n            self.ctx.dataSet[rowIndex][periodIndex + 2] = cellValue;\n        }\n    });\n    \n    self.ctx.datatable.rows().invalidate().draw(false);\n};\n\nself.onResize = function() {\n    if (self.ctx.datatable) {\n        self.onResizeScrollY();\n        \n        self.ctx.datatable.columns.adjust().draw('page');\n    }\n};\n\nself.onResizeScrollY = function() {\n    let minScrollY = 50;\n    let $tableContainer = $(self.ctx.datatable.table().container());\n    let $tableBody = $('.dataTables_scrollBody', $tableContainer);\n    let scrollY = self.ctx.$container.height() - ($tableContainer.height() - $tableBody.outerHeight()) - 10;\n    scrollY = (scrollY>minScrollY)?scrollY:minScrollY;\n    $tableBody.css('maxHeight', scrollY + 'px');\n};\n\nself.onDestroy = function() {\n    self.ctx.datatable.destroy();\n};\n",
        "settingsSchema": "{\n    \"schema\": {\n        \"type\": \"object\",\n        \"title\": \"Entity Settings\",\n        \"properties\": {\n            \"entityColumnTitle\": {\n                \"title\": \"Entities column title\",\n                \"type\": \"string\",\n                \"default\": \"\"\n            },\n            \"entityNameAttribute\": {\n                \"title\": \"Use attribute instead of entity name\",\n                \"type\": \"string\",\n                \"default\": \"\"\n            },\n            \"entityColumnWidth\": {\n                \"title\": \"Entities column width (px or %)\",\n                \"type\": \"string\",\n                \"default\": \"\"\n            },\n            \"keyColumnTitle\": {\n                \"title\": \"Keys column title\",\n                \"type\": \"string\",\n                \"default\": \"\"\n            },\n            \"keyColumnWidth\": {\n                \"title\": \"Keys column width (px or %)\",\n                \"type\": \"string\",\n                \"default\": \"\"\n            },\n            \"periodColumnFormat\": {\n                \"title\": \"Period format\",\n                \"type\": \"string\",\n                \"default\": \"\"\n            },\n            \"enableSearch\": {\n                \"title\": \"Enable entities search\",\n                \"type\": \"boolean\",\n                \"default\": true\n            },\n            \"displayPagination\": {\n                \"title\": \"Display pagination\",\n                \"type\": \"boolean\",\n                \"default\": true\n            },\n            \"defaultEntityPageSize\": {\n                \"title\": \"Default entities page size\",\n                \"type\": \"number\",\n                \"default\": 1\n            }\n        },\n        \"required\": []\n    },\n    \"form\": [\n        \"entityColumnTitle\",\n        \"entityNameAttribute\",\n        \"entityColumnWidth\",\n        \"keyColumnTitle\",\n        \"keyColumnWidth\",\n        \"periodColumnFormat\",\n        \"enableSearch\",\n        \"displayPagination\",\n        \"defaultEntityPageSize\"\n    ]\n}",
        "dataKeySettingsSchema": "{\n    \"schema\": {\n        \"type\": \"object\",\n        \"title\": \"DataKeySettings\",\n        \"properties\": {\n            \"useCellStyleFunction\": {\n                \"title\": \"Use cell style function\",\n                \"type\": \"boolean\",\n                \"default\": false\n            },\n            \"cellStyleFunction\": {\n                \"title\": \"Cell style function: f(value)\",\n                \"type\": \"string\",\n                \"default\": \"\"\n            },\n            \"useCellContentFunction\": {\n                \"title\": \"Use cell content function\",\n                \"type\": \"boolean\",\n                \"default\": false\n            },\n            \"cellContentFunction\": {\n                \"title\": \"Cell content function: f(value, rowData)\",\n                \"type\": \"string\",\n                \"default\": \"\"\n            }\n        },\n        \"required\": []\n    },\n    \"form\": [\n        \"useCellStyleFunction\",\n        {\n            \"key\": \"cellStyleFunction\",\n            \"type\": \"javascript\"\n        },\n        \"useCellContentFunction\",\n        {\n            \"key\": \"cellContentFunction\",\n            \"type\": \"javascript\"\n        }\n    ]\n}",
        "defaultConfig": "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"First\",\"color\":\"#2196f3\",\"settings\":{\"showLines\":true,\"fillLines\":true,\"showPoints\":false},\"_hash\":0.8587686344902596,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"},{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Second\",\"color\":\"#ffc107\",\"settings\":{\"columnWidth\":\"0px\"},\"_hash\":0.12775350966079668,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\",\"units\":\"\",\"decimals\":null}]}],\"timewindow\":{\"realtime\":{\"interval\":5000,\"timewindowMs\":60000},\"aggregation\":{\"type\":\"NONE\",\"limit\":100}},\"showTitle\":true,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"8px\",\"settings\":{\"enableSearch\":true,\"displayPagination\":true,\"defaultEntityPageSize\":5},\"title\":\"Daily Report\",\"dropShadow\":true,\"enableFullscreen\":true,\"titleStyle\":{\"fontSize\":\"16px\",\"fontWeight\":400},\"mobileHeight\":null,\"widgetStyle\":{},\"useDashboardTimewindow\":false,\"showLegend\":false,\"actions\":{},\"units\":\"\",\"decimals\":null,\"displayTimewindow\":true}"
      }
    },
    {
      "alias": "daily_report_tabs_",
      "name": "Daily Report (tabs)",
      "descriptor": {
        "type": "timeseries",
        "sizeX": 8,
        "sizeY": 6.5,
        "resources": [
          {
            "url": "http://27.254.81.229:1880/assets/datatables/css/jquery.datatables-1.10.18.min.css"
          },
          {
            "url": "http://27.254.81.229:1880/assets/datatables/css/buttons-1.5.6.min.css"
          },
          {
            "url": "http://27.254.81.229:1880/assets/jszip-2.5.0.min.js"
          },
          {
            "url": "http://27.254.81.229:1880/assets/datatables/js/jquery.datatables-1.10.18.min.js"
          },
          {
            "url": "http://27.254.81.229:1880/assets/datatables/js/buttons-1.5.6.min.js"
          },
          {
            "url": "http://27.254.81.229:1880/assets/datatables/js/buttons.html5-1.5.6.min.js"
          }
        ],
        "templateHtml": "<md-tabs id=\"tabs\" md-dynamic-height>\n    <md-tab ng-repeat=\"table in tables\" label=\"{{table.name}}\">\n        <table id=\"{{table.id}}\" class=\"display compact\" width=\"100%\"></table>\n    </md-tab>\n</md-tabs>\n",
        "templateCss": "",
        "controllerScript": "self.typeParameters = function() {\n    return {\n        maxDatasources: 1\n    };\n};\n\nself.onInit = function() {\n    let attributeService = self.ctx.$scope.$injector.get('attributeService');\n    let periods = [];\n    let columns = [];\n    let dataSet = [];\n    let tables = [];\n    \n    columns[0] = { \n        title: self.ctx.settings.periodTitle||'Date',\n        width: self.ctx.settings.periodColumnWidth||null\n    };\n    \n    self.ctx.datasources[0].dataKeys.forEach(function(dataKey, indexDataKey) {\n        let cellStyleFunction = new Function('value', dataKey.settings.cellStyleFunction);\n        let cellContentFunction = new Function('value', 'rowData', dataKey.settings.cellContentFunction);\n        \n        columns[indexDataKey + 1] = {\n            title: dataKey.label,\n            width: dataKey.settings.columnWidth||null,\n            searchable: false,\n            createdCell: function (td, data) {\n                if(dataKey.settings.useCellStyleFunction) {\n                    try {\n                        let styles = cellStyleFunction(data);\n                        if (styles) {\n                            $(td).css(styles);\n                        }\n                    }\n                    catch (e) {}\n                }\n            },\n            render: function (data, type, rowData, meta) {\n                if (type === 'display') {\n                    if (dataKey.settings.useCellContentFunction) {\n                        try {\n                            return cellContentFunction(data, rowData);\n                        }\n                        catch (e) {}\n                    } \n                    else if (typeof data === 'number') {\n                        let decimals = self.ctx.decimals||(data.toString().split('.')[1]||'').length;\n                        let units = self.ctx.units;\n                        if (dataKey.decimals || dataKey.decimals === 0) {\n                            decimals = dataKey.decimals;\n                        }\n                        if (dataKey.units) {\n                            units = dataKey.units;\n                        }\n                        return self.ctx.utils.formatValue(data, decimals, units, true);\n                    } \n                }\n                return data;\n            }\n        };\n    });\n\n    self.ctx.datasources.forEach(function(datasource, indexDatasource) {\n        dataSet[indexDatasource] = [];\n        \n        tables[indexDatasource] = {\n            id: datasource.name.replace(' ', '%20'),\n            name: datasource.name\n        };\n        \n        if (self.ctx.settings.entityNameAttribute && datasource.entityId) {\n            attributeService.getEntityAttributesValues(datasource.entityType, datasource.entityId, 'SERVER_SCOPE', self.ctx.settings.entityNameAttribute).then(function (attributes) {\n                if (attributes && attributes.length > 0) {\n                    tables[indexDatasource].name = attributes[0].value;\n                }\n            });\n        }\n    });\n    \n    self.ctx.periods = periods;\n    self.ctx.columns = columns;\n    self.ctx.dataSet = dataSet;\n    self.ctx.datatables = [];\n    self.ctx.$scope.tables = tables;\n    self.ctx.currentSubscriptionTimewindow = self.ctx.defaultSubscription.subscriptionTimewindow;\n};\n\nself.onDataUpdated = function() {\n    if (!self.ctx.defaultSubscription.subscriptionTimewindow) {\n        return;\n    }\n\n    if (self.ctx.datatables.length === 0) {\n        self.ctx.$scope.tables.forEach(function(table, tableIndex) {\n            self.ctx.datatables[tableIndex] = $('#' + table.id, self.ctx.$container).DataTable({\n                data: self.ctx.dataSet[tableIndex],\n                columns: self.ctx.columns,\n                searching: false,\n                paging: self.ctx.settings.displayPagination,\n                lengthChange: false,\n                pageLength: self.ctx.settings.defaultPageSize,\n                scrollX: true,\n                scrollCollapse: true,\n                buttons: [\n                    {\n                        extend: 'excelHtml5',\n                        filename: (self.ctx.widgetConfig.title || 'Report Daily') + '_' + table.name,\n                        title: null,\n                        exportOptions: {\n                            orthogonal: 'data'\n                        }\n                    }\n                ]\n            });\n            \n            self.ctx.datatables[tableIndex].button(0).container().prependTo(self.ctx.datatables[tableIndex].table().container());\n        });\n    }\n    \n    if (self.ctx.currentSubscriptionTimewindow !== self.ctx.defaultSubscription.subscriptionTimewindow) {\n        let periods = [];\n        let periodsDisplay = [];\n        let dateStart = moment(self.ctx.defaultSubscription.timeWindow.minTime);\n        let dateEnd = moment(self.ctx.defaultSubscription.timeWindow.maxTime);\n        let daysDiff = dateEnd.diff(dateStart, 'days');\n        \n        for(let i=0;i<=daysDiff;i++) {\n            periods[i] = dateStart.format('YYYY-MM-DD');\n            periodsDisplay[i] = dateStart.format(self.ctx.settings.periodColumnFormat||'YYYY-MM-DD');\n            dateStart.add(1, 'days');\n        }\n        \n        self.ctx.datasources.forEach(function(datasource, indexDatasource) {\n            self.ctx.dataSet[indexDatasource] = [];\n            periods.forEach(function (period, indexPeriod) {\n                self.ctx.dataSet[indexDatasource][indexPeriod] = [];\n                self.ctx.dataSet[indexDatasource][indexPeriod][0] = periodsDisplay[indexPeriod];\n                \n                self.ctx.datasources[indexDatasource].dataKeys.forEach(function(dataKey, indexDataKey) {\n                    self.ctx.dataSet[indexDatasource][indexPeriod][indexDataKey + 1] = null;\n                });\n            });\n            \n            self.ctx.datatables[indexDatasource].clear();\n            self.ctx.datatables[indexDatasource].rows.add(self.ctx.dataSet[indexDatasource]);\n        });\n            \n        self.ctx.periods = periods;\n        self.ctx.currentSubscriptionTimewindow = self.ctx.defaultSubscription.subscriptionTimewindow;\n        \n        self.onResizeScrollY();\n    }\n    \n    self.ctx.data.forEach(function(cellData) {\n        let datasourceIndex =  self.ctx.datasources.indexOf(cellData.datasource);\n        let datakeyIndex = cellData.datasource.dataKeys.indexOf(cellData.dataKey) + 1;\n        let periodData = {};\n        \n        cellData.data.forEach(function (data) {\n            let period = moment(data[0]).format('YYYY-MM-DD');\n            if (!periodData[period]) {\n                periodData[period] = [];\n            }\n            periodData[period].push(data);\n        });\n        \n        for (let period in periodData) {\n            let cellPeriodData = periodData[period];\n            let periodIndex = self.ctx.periods.indexOf(period);\n            let cellValue = null;\n\n            switch(self.ctx.defaultSubscription.subscriptionTimewindow.aggregation.type) {\n              case 'MIN':\n                cellValue = cellPeriodData\n                    .map(function(data) {\n                        return data[1];\n                    })\n                    .reduce(function(lastData, currentData) {\n                        return (lastData<currentData)?lastData:currentData;\n                    });\n                break;\n              case 'MAX':\n                cellValue = cellPeriodData\n                    .map(function(data) {\n                        return data[1];\n                    })\n                    .reduce(function(lastData, currentData) {\n                        return (lastData>currentData)?lastData:currentData;\n                    });\n                break;\n              case 'AVG':\n                cellValue = cellPeriodData\n                    .map(function(data) {\n                        return data[1];\n                    })\n                    .reduce(function (lastData, currentData) {\n                        lastData += currentData;\n                        return lastData;\n                    })/cellData.data.length;\n                break;\n              case 'SUM':\n                cellValue = cellPeriodData\n                    .map(function(data) {\n                        return data[1];\n                    })\n                    .reduce(function (lastData, currentData) {\n                        lastData += currentData;\n                        return lastData;\n                    });\n                break;\n              case 'COUNT':\n                cellValue = cellPeriodData\n                    .map(function(data) {\n                        return data[1];\n                    })\n                    .reduce(function (lastData, currentData) {\n                        lastData += currentData;\n                        return lastData;\n                    });\n                break;\n              default:\n                cellValue = cellPeriodData[cellPeriodData.length - 1][1];\n            }\n            \n            self.ctx.dataSet[datasourceIndex][periodIndex][datakeyIndex] = cellValue;\n        }\n    });\n    \n    self.ctx.datatables.forEach(function(datatable) {\n        datatable.rows().invalidate().draw(false);\n    });\n};\n\nself.onResize = function() {\n    self.onResizeScrollY();\n    \n    self.ctx.datatables.forEach(function(datatable) {\n        datatable.columns.adjust().draw('page');\n    });\n};\n\nself.onResizeScrollY = function() {\n    let minScrollY = 50;\n    self.ctx.datatables.forEach(function(datatable) {\n        let $tableContainer = $(datatable.table().container());\n        let $tableBody = $('.dataTables_scrollBody', $tableContainer);\n        let scrollY = self.ctx.$container.height() - ($tableContainer.height() - $tableBody.outerHeight()) - 80;\n        scrollY = (scrollY>minScrollY)?scrollY:minScrollY;\n        $tableBody.css('maxHeight', scrollY + 'px');\n    });\n};\n\nself.onDestroy = function() {\n    self.ctx.datatables.forEach(function(datatable) {\n        datatable.destroy();\n    });\n};\n",
        "settingsSchema": "{\n    \"schema\": {\n        \"type\": \"object\",\n        \"title\": \"Entity Settings\",\n        \"properties\": {\n            \"entityNameAttribute\": {\n                \"title\": \"Use attribute instead of entity name\",\n                \"type\": \"string\",\n                \"default\": \"\"\n            },\n            \"periodTitle\": {\n                \"title\": \"Period column title\",\n                \"type\": \"string\",\n                \"default\": \"\"\n            },\n            \"periodColumnFormat\": {\n                \"title\": \"Period column format\",\n                \"type\": \"string\",\n                \"default\": \"\"\n            },\n            \"periodColumnWidth\": {\n                \"title\": \"Period column width (px or %)\",\n                \"type\": \"string\",\n                \"default\": \"\"\n            },\n            \"displayPagination\": {\n                \"title\": \"Display pagination\",\n                \"type\": \"boolean\",\n                \"default\": true\n            },\n            \"defaultPageSize\": {\n                \"title\": \"Default page size\",\n                \"type\": \"number\",\n                \"default\": 10\n            }\n        },\n        \"required\": []\n    },\n    \"form\": [\n        \"entityNameAttribute\",\n        \"periodTitle\",\n        \"periodColumnFormat\",\n        \"periodColumnWidth\",\n        \"displayPagination\",\n        \"defaultPageSize\"\n    ]\n}",
        "dataKeySettingsSchema": "{\n    \"schema\": {\n        \"type\": \"object\",\n        \"title\": \"DataKeySettings\",\n        \"properties\": {\n            \"columnWidth\": {\n                \"title\": \"Column width (px or %)\",\n                \"type\": \"string\",\n                \"default\": \"\"\n            },\n            \"useCellStyleFunction\": {\n                \"title\": \"Use cell style function\",\n                \"type\": \"boolean\",\n                \"default\": false\n            },\n            \"cellStyleFunction\": {\n                \"title\": \"Cell style function: f(value)\",\n                \"type\": \"string\",\n                \"default\": \"\"\n            },\n            \"useCellContentFunction\": {\n                \"title\": \"Use cell content function\",\n                \"type\": \"boolean\",\n                \"default\": false\n            },\n            \"cellContentFunction\": {\n                \"title\": \"Cell content function: f(value, rowData)\",\n                \"type\": \"string\",\n                \"default\": \"\"\n            }\n        },\n        \"required\": []\n    },\n    \"form\": [\n        \"columnWidth\",\n        \"useCellStyleFunction\",\n        {\n            \"key\": \"cellStyleFunction\",\n            \"type\": \"javascript\"\n        },\n        \"useCellContentFunction\",\n        {\n            \"key\": \"cellContentFunction\",\n            \"type\": \"javascript\"\n        }\n    ]\n}",
        "defaultConfig": "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"First\",\"color\":\"#2196f3\",\"settings\":{\"showLines\":true,\"fillLines\":true,\"showPoints\":false},\"_hash\":0.8587686344902596,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"},{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Second\",\"color\":\"#ffc107\",\"settings\":{\"columnWidth\":\"0px\"},\"_hash\":0.12775350966079668,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\",\"units\":\"\",\"decimals\":null}]}],\"timewindow\":{\"realtime\":{\"interval\":5000,\"timewindowMs\":60000},\"aggregation\":{\"type\":\"NONE\",\"limit\":100}},\"showTitle\":true,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"8px\",\"settings\":{\"displayPagination\":true,\"defaultPageSize\":10},\"title\":\"Daily Report (tabs)\",\"dropShadow\":true,\"enableFullscreen\":true,\"titleStyle\":{\"fontSize\":\"16px\",\"fontWeight\":400},\"mobileHeight\":null,\"widgetStyle\":{},\"useDashboardTimewindow\":false,\"showLegend\":false,\"actions\":{},\"units\":\"\",\"decimals\":null,\"displayTimewindow\":true}"
      }
    },
    {
      "alias": "bar_side_by_side",
      "name": "Entities Bar",
      "descriptor": {
        "type": "latest",
        "sizeX": 7,
        "sizeY": 5,
        "resources": [
          {
            "url": "http://27.254.81.229:1880/assets/chartjs-2.8.0.min.js"
          }
        ],
        "templateHtml": "<canvas class=\"barChart\"></canvas>",
        "templateCss": "",
        "controllerScript": "self.typeParameters = function() {\n    return {\n        maxDatasources: 1\n    };\n};\n\nself.onInit = function() {\n    let attributeService = self.ctx.$scope.$injector.get('attributeService');\n    let barData = {\n        labels: [],\n        datasets: []\n    };\n    \n    self.ctx.datasources[0].dataKeys.forEach(function(dataKey) {\n        barData.datasets.push({\n            label: dataKey.label,\n            data: [],\n            backgroundColor: [],\n            borderColor: [],\n            borderWidth: 1\n        });\n    });\n    \n    self.ctx.datasources.forEach(function(datasource, indexDatasource) {\n        barData.labels[indexDatasource] = datasource.name;\n        if (self.ctx.settings.entityNameAttribute && datasource.entityId) {\n            attributeService.getEntityAttributesValues(datasource.entityType, datasource.entityId, 'SERVER_SCOPE', self.ctx.settings.entityNameAttribute).then(function (attributes) {\n                if (attributes && attributes.length > 0) {\n                    barData.labels[indexDatasource] = attributes[0].value;\n                }\n            });\n        }\n        \n        datasource.dataKeys.forEach(function(dataKey, indexDataKey) {\n            barData.datasets[indexDataKey].data[indexDatasource] = 0;\n            barData.datasets[indexDataKey].backgroundColor[indexDatasource] = self.ctx.datasources[0].dataKeys[indexDataKey].color;\n            barData.datasets[indexDataKey].borderColor[indexDatasource] = self.ctx.datasources[0].dataKeys[indexDataKey].color;\n        });\n    });\n\n    self.ctx.chart = new Chart($('.barChart', self.ctx.$container), {\n        type: 'bar',\n        data: barData,\n        options: {\n            responsive: false,\n            maintainAspectRatio: false,\n            scales: {\n                yAxes: [{\n                    ticks: {\n                        beginAtZero: true\n                    }\n                }]\n            }\n        }\n    });\n    \n    self.onResize();\n};\n\nself.onDataUpdated = function() {\n    self.ctx.data.forEach(function(cellData) {\n        if (cellData.data.length > 0) {\n            let datasetIndex = cellData.datasource.dataKeys.indexOf(cellData.dataKey);\n            let dataIndex = self.ctx.datasources.indexOf(cellData.datasource);\n            \n            self.ctx.chart.data.datasets[datasetIndex].data[dataIndex] = parseFloat(cellData.data[cellData.data.length - 1][1]);\n        }\n    });\n    \n    self.ctx.chart.update();\n};\n\nself.onResize = function() {\n    self.ctx.chart.resize();\n};\n\nself.onDestroy = function() {\n    self.ctx.chart.destroy();\n};\n",
        "settingsSchema": "{\n    \"schema\": {\n        \"type\": \"object\",\n        \"title\": \"Entity Settings\",\n        \"properties\": {\n            \"entityNameAttribute\": {\n                \"title\": \"Use attribute instead of entity name\",\n                \"type\": \"string\",\n                \"default\": \"\"\n            }\n        },\n        \"required\": []\n    },\n    \"form\": [\n        \"entityNameAttribute\"\n    ]\n}",
        "dataKeySettingsSchema": "",
        "defaultConfig": "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"First\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.15479322438769105,\"funcBody\":\"var value = (prevValue-50) + Math.random() * 2 - 1;\\nif (value < 0) {\\n\\tvalue = 0;\\n} else if (value > 100) {\\n\\tvalue = 100;\\n}\\nreturn value+50;\"},{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Second\",\"color\":\"#4caf50\",\"settings\":{},\"_hash\":0.545701115289893,\"funcBody\":\"var value = (prevValue-20) + Math.random() * 2 - 1;\\nif (value < 0) {\\n\\tvalue = 0;\\n} else if (value > 100) {\\n\\tvalue = 100;\\n}\\nreturn value+20;\"},{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Third\",\"color\":\"#f44336\",\"settings\":{},\"_hash\":0.2592906835158064,\"funcBody\":\"var value = (prevValue-40) + Math.random() * 2 - 1;\\nif (value < 0) {\\n\\tvalue = 0;\\n} else if (value > 100) {\\n\\tvalue = 100;\\n}\\nreturn value+40;\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":true,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"8px\",\"settings\":{},\"title\":\"Entities Bar\",\"dropShadow\":true,\"enableFullscreen\":true,\"widgetStyle\":{},\"titleStyle\":{\"fontSize\":\"16px\",\"fontWeight\":400},\"useDashboardTimewindow\":true,\"showLegend\":false,\"actions\":{}}"
      }
    },
    {
      "alias": "entities_table_timeseries_",
      "name": "Entities Table (time series)",
      "descriptor": {
        "type": "timeseries",
        "sizeX": 8,
        "sizeY": 4.5,
        "resources": [
          {
            "url": "http://27.254.81.229:1880/assets/datatables/css/jquery.datatables-1.10.18.min.css"
          },
          {
            "url": "http://27.254.81.229:1880/assets/datatables/css/buttons-1.5.6.min.css"
          },
          {
            "url": "http://27.254.81.229:1880/assets/jszip-2.5.0.min.js"
          },
          {
            "url": "http://27.254.81.229:1880/assets/datatables/js/jquery.datatables-1.10.18.min.js"
          },
          {
            "url": "http://27.254.81.229:1880/assets/datatables/js/buttons-1.5.6.min.js"
          },
          {
            "url": "http://27.254.81.229:1880/assets/datatables/js/buttons.html5-1.5.6.min.js"
          }
        ],
        "templateHtml": "<table class=\"display compact\" width=\"100%\"></table>",
        "templateCss": "",
        "controllerScript": "self.typeParameters = function() {\n    return {\n        maxDatasources: 1\n    };\n};\n\nself.actionSources = function() {\n    return {\n        'rowClick': {\n            name: 'widget-action.row-click'\n        }\n    };\n};\n\nself.onInit = function() {\n    let attributeService = self.ctx.$scope.$injector.get('attributeService');\n    let rowClickDescriptors = self.ctx.actionsApi.getActionDescriptors('rowClick');\n    let columns = [];\n    let dataSet = [];\n    \n    columns[0] = { \n        title: self.ctx.settings.entityColumnTitle||'Entities',\n        width: self.ctx.settings.entityColumnWidth||null\n    };\n    self.ctx.datasources[0].dataKeys.forEach(function(dataKey, indexDataKey) {\n        let cellStyleFunction = new Function('value', dataKey.settings.cellStyleFunction);\n        let cellContentFunction = new Function('value', 'rowData', dataKey.settings.cellContentFunction);\n        \n        columns[indexDataKey + 1] = {\n            title: dataKey.label,\n            width: dataKey.settings.columnWidth||null,\n            searchable: false,\n            createdCell: function (td, data) {\n                if(dataKey.settings.useCellStyleFunction) {\n                    try {\n                        let styles = cellStyleFunction(data);\n                        if (styles) {\n                            $(td).css(styles);\n                        }\n                    }\n                    catch (e) {}\n                }\n            },\n            render: function (data, type, rowData, meta) {\n                if (type === 'display') {\n                    if (dataKey.settings.useCellContentFunction) {\n                        try {\n                            return cellContentFunction(data, rowData);\n                        }\n                        catch (e) {}\n                    } \n                    else if (typeof data === 'number') {\n                        let decimals = self.ctx.decimals||(data.toString().split('.')[1]||'').length;\n                        let units = self.ctx.units;\n                        if (dataKey.decimals || dataKey.decimals === 0) {\n                            decimals = dataKey.decimals;\n                        }\n                        if (dataKey.units) {\n                            units = dataKey.units;\n                        }\n                        return self.ctx.utils.formatValue(data, decimals, units, true);\n                    } \n                }\n                return data;\n            }\n        };\n    });\n\n    self.ctx.datasources.forEach(function(datasource, indexDatasource) {\n        dataSet[indexDatasource] = [];\n        \n        dataSet[indexDatasource][0] = datasource.name;\n        if (self.ctx.settings.entityNameAttribute && datasource.entityId) {\n            attributeService.getEntityAttributesValues(datasource.entityType, datasource.entityId, 'SERVER_SCOPE', self.ctx.settings.entityNameAttribute).then(function (attributes) {\n                if (attributes && attributes.length > 0) {\n                    dataSet[indexDatasource][0] = attributes[0].value;\n                }\n            });\n        }\n        \n        self.ctx.datasources[indexDatasource].dataKeys.forEach(function(dataKey, indexDataKey) {\n            dataSet[indexDatasource][indexDataKey + 1] = null;\n        });\n    });\n    \n    self.ctx.columns = columns;\n    self.ctx.dataSet = dataSet;\n    self.ctx.datatable = $('table', self.ctx.$container).DataTable({\n        data: dataSet,\n        columns: columns,\n        searching: self.ctx.settings.enableSearch,\n        paging: self.ctx.settings.displayPagination,\n        pageLength: self.ctx.settings.defaultPageSize,\n        lengthChange: false,\n        scrollX: true,\n        scrollCollapse: true,\n        createdRow: function (tr, rowData, index) {\n            if (rowClickDescriptors) {\n                let entityId = { \n                    id: self.ctx.datasources[index].entityId, \n                    entityType: self.ctx.datasources[index].entityType\n                };\n                let entityName = self.ctx.datasources[index].entityName;\n                $(tr).on('click', function($event) {\n                    self.ctx.actionsApi.handleWidgetAction($event, rowClickDescriptors[0], entityId, entityName);\n                });\n            }\n        },\n        buttons: [\n            {\n                extend: 'excelHtml5',\n                filename: self.ctx.widgetConfig.title || 'Entities table',\n                title: null,\n                exportOptions: {\n                    orthogonal: 'data'\n                }\n            }\n        ]\n    });\n    \n    self.ctx.datatable.button(0).container().prependTo(self.ctx.datatable.table().container());\n    self.onResizeScrollY();\n};\n\nself.onDataUpdated = function() {\n    if (!self.ctx.defaultSubscription.subscriptionTimewindow) {\n        return;\n    }\n    \n    self.ctx.data.forEach(function(cellData) {\n        if (cellData.data.length > 0) {\n            let datasourceIndex =  self.ctx.datasources.indexOf(cellData.datasource);\n            let datakeyIndex = cellData.datasource.dataKeys.indexOf(cellData.dataKey);\n            let cellValue = null;\n\n            switch(self.ctx.defaultSubscription.subscriptionTimewindow.aggregation.type) {\n              case 'MIN':\n                cellValue = cellData.data\n                    .map(function(data) {\n                        return data[1];\n                    })\n                    .reduce(function(lastData, currentData) {\n                        return (lastData<currentData)?lastData:currentData;\n                    });\n                break;\n              case 'MAX':\n                cellValue = cellData.data\n                    .map(function(data) {\n                        return data[1];\n                    })\n                    .reduce(function(lastData, currentData) {\n                        return (lastData>currentData)?lastData:currentData;\n                    });\n                break;\n              case 'AVG':\n                cellValue = cellData.data\n                    .map(function(data) {\n                        return data[1];\n                    })\n                    .reduce(function (lastData, currentData) {\n                        lastData += currentData;\n                        return lastData;\n                    })/cellData.data.length;\n                break;\n              case 'SUM':\n                cellValue = cellData.data\n                    .map(function(data) {\n                        return data[1];\n                    })\n                    .reduce(function (lastData, currentData) {\n                        lastData += currentData;\n                        return lastData;\n                    });\n                break;\n              case 'COUNT':\n                cellValue = cellData.data\n                    .map(function(data) {\n                        return data[1];\n                    })\n                    .reduce(function (lastData, currentData) {\n                        lastData += currentData;\n                        return lastData;\n                    });\n                break;\n              default:\n                cellValue = cellData.data[cellData.data.length - 1][1];\n            }\n            \n            self.ctx.dataSet[datasourceIndex][datakeyIndex + 1] = cellValue;\n        }\n    });\n    \n    self.ctx.datatable.rows().invalidate().draw(false);\n};\n\nself.onResize = function() {\n    self.onResizeScrollY();\n    \n    self.ctx.datatable.columns.adjust().draw('page');\n};\n\nself.onResizeScrollY = function() {\n    let minScrollY = 50;\n    let $tableContainer = $(self.ctx.datatable.table().container());\n    let $tableBody = $('.dataTables_scrollBody', $tableContainer);\n    let scrollY = self.ctx.$container.height() - ($tableContainer.height() - $tableBody.outerHeight()) - 10;\n    scrollY = (scrollY>minScrollY)?scrollY:minScrollY;\n    $tableBody.css('maxHeight', scrollY + 'px');\n}\n\nself.onDestroy = function() {\n    self.ctx.datatable.destroy();\n}\n",
        "settingsSchema": "{\n    \"schema\": {\n        \"type\": \"object\",\n        \"title\": \"Entity Settings\",\n        \"properties\": {\n            \"entityColumnTitle\": {\n                \"title\": \"Entities column title\",\n                \"type\": \"string\",\n                \"default\": \"\"\n            },\n            \"entityNameAttribute\": {\n                \"title\": \"Use attribute instead of entity name\",\n                \"type\": \"string\",\n                \"default\": \"\"\n            },\n            \"entityColumnWidth\": {\n                \"title\": \"Entities column width (px or %)\",\n                \"type\": \"string\",\n                \"default\": \"\"\n            },\n            \"enableSearch\": {\n                \"title\": \"Enable entities search\",\n                \"type\": \"boolean\",\n                \"default\": true\n            },\n            \"displayPagination\": {\n                \"title\": \"Display pagination\",\n                \"type\": \"boolean\",\n                \"default\": true\n            },\n            \"defaultPageSize\": {\n                \"title\": \"Default page size\",\n                \"type\": \"number\",\n                \"default\": 10\n            }\n        },\n        \"required\": []\n    },\n    \"form\": [\n        \"entityColumnTitle\",\n        \"entityNameAttribute\",\n        \"entityColumnWidth\",\n        \"enableSearch\",\n        \"displayPagination\",\n        \"defaultPageSize\"\n    ]\n}",
        "dataKeySettingsSchema": "{\n    \"schema\": {\n        \"type\": \"object\",\n        \"title\": \"DataKeySettings\",\n        \"properties\": {\n            \"columnWidth\": {\n                \"title\": \"Column width (px or %)\",\n                \"type\": \"string\",\n                \"default\": \"\"\n            },\n            \"useCellStyleFunction\": {\n                \"title\": \"Use cell style function\",\n                \"type\": \"boolean\",\n                \"default\": false\n            },\n            \"cellStyleFunction\": {\n                \"title\": \"Cell style function: f(value)\",\n                \"type\": \"string\",\n                \"default\": \"\"\n            },\n            \"useCellContentFunction\": {\n                \"title\": \"Use cell content function\",\n                \"type\": \"boolean\",\n                \"default\": false\n            },\n            \"cellContentFunction\": {\n                \"title\": \"Cell content function: f(value, rowData)\",\n                \"type\": \"string\",\n                \"default\": \"\"\n            }\n        },\n        \"required\": []\n    },\n    \"form\": [\n        \"columnWidth\",\n        \"useCellStyleFunction\",\n        {\n            \"key\": \"cellStyleFunction\",\n            \"type\": \"javascript\"\n        },\n        \"useCellContentFunction\",\n        {\n            \"key\": \"cellContentFunction\",\n            \"type\": \"javascript\"\n        }\n    ]\n}",
        "defaultConfig": "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"First\",\"color\":\"#2196f3\",\"settings\":{\"showLines\":true,\"fillLines\":true,\"showPoints\":false},\"_hash\":0.8587686344902596,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"},{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Second\",\"color\":\"#ffc107\",\"settings\":{\"columnWidth\":\"0px\"},\"_hash\":0.12775350966079668,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\",\"units\":\"\",\"decimals\":null}]}],\"timewindow\":{\"realtime\":{\"interval\":5000,\"timewindowMs\":60000},\"aggregation\":{\"type\":\"NONE\",\"limit\":100}},\"showTitle\":true,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"8px\",\"settings\":{\"enableSearch\":true,\"displayPagination\":true,\"defaultPageSize\":10},\"title\":\"Entities Table (time series)\",\"dropShadow\":true,\"enableFullscreen\":true,\"titleStyle\":{\"fontSize\":\"16px\",\"fontWeight\":400},\"mobileHeight\":null,\"widgetStyle\":{},\"useDashboardTimewindow\":false,\"showLegend\":false,\"actions\":{},\"units\":\"\",\"decimals\":null,\"displayTimewindow\":true}"
      }
    },
    {
      "alias": "raw_table",
      "name": "Raw Table",
      "descriptor": {
        "type": "timeseries",
        "sizeX": 8,
        "sizeY": 6.5,
        "resources": [
          {
            "url": "http://27.254.81.229:1880/assets/datatables/css/jquery.datatables-1.10.18.min.css"
          },
          {
            "url": "http://27.254.81.229:1880/assets/datatables/css/buttons-1.5.6.min.css"
          },
          {
            "url": "http://27.254.81.229:1880/assets/jszip-2.5.0.min.js"
          },
          {
            "url": "http://27.254.81.229:1880/assets/datatables/js/jquery.datatables-1.10.18.min.js"
          },
          {
            "url": "http://27.254.81.229:1880/assets/datatables/js/buttons-1.5.6.min.js"
          },
          {
            "url": "http://27.254.81.229:1880/assets/datatables/js/buttons.html5-1.5.6.min.js"
          }
        ],
        "templateHtml": "<md-tabs id=\"tabs\" md-dynamic-height>\n    <md-tab ng-repeat=\"table in tables\" label=\"{{table.name}}\">\n        <table id=\"{{table.id}}\" class=\"display compact\" width=\"100%\"></table>\n    </md-tab>\n</md-tabs>\n",
        "templateCss": "",
        "controllerScript": "self.typeParameters = function() {\n    return {\n        maxDatasources: 1\n    };\n};\n\nself.onInit = function() {\n    let attributeService = self.ctx.$scope.$injector.get('attributeService');\n    let periods = [];\n    let columns = [];\n    let dataSet = [];\n    let tables = [];\n    \n    columns[0] = { \n        title: self.ctx.settings.periodTitle||'Date',\n        width: self.ctx.settings.periodColumnWidth||null\n    };\n    \n    self.ctx.datasources[0].dataKeys.forEach(function(dataKey, indexDataKey) {\n        let cellStyleFunction = new Function('value', dataKey.settings.cellStyleFunction);\n        let cellContentFunction = new Function('value', 'rowData', dataKey.settings.cellContentFunction);\n        \n        columns[indexDataKey + 1] = {\n            title: dataKey.label,\n            width: dataKey.settings.columnWidth||null,\n            searchable: false,\n            createdCell: function (td, data) {\n                if(dataKey.settings.useCellStyleFunction) {\n                    try {\n                        let styles = cellStyleFunction(data);\n                        if (styles) {\n                            $(td).css(styles);\n                        }\n                    }\n                    catch (e) {}\n                }\n            },\n            render: function (data, type, rowData, meta) {\n                if (type === 'display') {\n                    if (dataKey.settings.useCellContentFunction) {\n                        try {\n                            return cellContentFunction(data, rowData);\n                        }\n                        catch (e) {}\n                    } \n                    else if (typeof data === 'number') {\n                        let decimals = self.ctx.decimals||(data.toString().split('.')[1]||'').length;\n                        let units = self.ctx.units;\n                        if (dataKey.decimals || dataKey.decimals === 0) {\n                            decimals = dataKey.decimals;\n                        }\n                        if (dataKey.units) {\n                            units = dataKey.units;\n                        }\n                        return self.ctx.utils.formatValue(data, decimals, units, true);\n                    } \n                }\n                return data;\n            }\n        };\n    });\n\n    self.ctx.datasources.forEach(function(datasource, indexDatasource) {\n        dataSet[indexDatasource] = [];\n        \n        tables[indexDatasource] = {\n            id: datasource.name.replace(' ', '%20'),\n            name: datasource.name\n        };\n        \n        if (self.ctx.settings.entityNameAttribute && datasource.entityId) {\n            attributeService.getEntityAttributesValues(datasource.entityType, datasource.entityId, 'SERVER_SCOPE', self.ctx.settings.entityNameAttribute).then(function (attributes) {\n                if (attributes && attributes.length > 0) {\n                    tables[indexDatasource].name = attributes[0].value;\n                }\n            });\n        }\n    });\n    \n    self.ctx.periods = periods;\n    self.ctx.columns = columns;\n    self.ctx.dataSet = dataSet;\n    self.ctx.datatables = [];\n    self.ctx.$scope.tables = tables;\n    self.ctx.currentSubscriptionTimewindow = self.ctx.defaultSubscription.subscriptionTimewindow;\n};\n\nself.onDataUpdated = function() {\n    if (!self.ctx.defaultSubscription.subscriptionTimewindow) {\n        return;\n    }\n    \n    if (self.ctx.datatables.length === 0) {\n        self.ctx.$scope.tables.forEach(function(table, tableIndex) {\n            self.ctx.datatables[tableIndex] = $('#' + table.id, self.ctx.$container).DataTable({\n                data: self.ctx.dataSet[tableIndex],\n                columns: self.ctx.columns,\n                searching: false,\n                order: [0, 'desc'],\n                paging: self.ctx.settings.displayPagination,\n                lengthChange: false,\n                pageLength: self.ctx.settings.defaultPageSize,\n                scrollX: true,\n                scrollCollapse: true,\n                buttons: [\n                    {\n                        extend: 'excelHtml5',\n                        filename: (self.ctx.widgetConfig.title || 'Raw Table') + '_' + table.name,\n                        title: null,\n                        exportOptions: {\n                            orthogonal: 'data'\n                        }\n                    }\n                ]\n            });\n            \n            self.ctx.datatables[tableIndex].button(0).container().prependTo(self.ctx.datatables[tableIndex].table().container());\n        });\n    }\n    \n    let periods = [];\n    self.ctx.data.forEach(function(cellData) {\n        cellData.data.forEach(function(data) {\n            let period = moment(data[0]).format('YYYY-MM-DD hh:mm:ss');\n            if(periods.indexOf(period) === -1) {\n                periods.push(period);\n            }\n        });\n    });\n    periods.sort();\n    self.ctx.periods = periods;\n    \n    self.ctx.datasources.forEach(function(datasource, indexDatasource) {\n        self.ctx.dataSet[indexDatasource] = [];\n        \n        periods.forEach(function (period, indexPeriod) {\n            self.ctx.dataSet[indexDatasource][indexPeriod] = [];\n            self.ctx.dataSet[indexDatasource][indexPeriod][0] = period;\n            \n            self.ctx.datasources[indexDatasource].dataKeys.forEach(function(dataKey, indexDataKey) {\n                self.ctx.dataSet[indexDatasource][indexPeriod][indexDataKey + 1] = null;\n            });\n        });\n    });\n    \n    self.ctx.data.forEach(function(cellData) {\n        let datasourceIndex =  self.ctx.datasources.indexOf(cellData.datasource);\n        let datakeyIndex = cellData.datasource.dataKeys.indexOf(cellData.dataKey);\n        \n        cellData.data.forEach(function (data) {\n            let period = moment(data[0]).format('YYYY-MM-DD hh:mm:ss');\n            let periodIndex = periods.indexOf(period);\n\n            self.ctx.dataSet[datasourceIndex][periodIndex][datakeyIndex + 1] = data[1];\n        });\n    });\n    \n    self.ctx.datatables.forEach(function(datatable, indexDatatable) {\n        datatable.clear();\n        datatable.rows.add(self.ctx.dataSet[indexDatatable]);\n        datatable.rows().invalidate().draw(false);\n    });\n    \n    self.onResizeScrollY();\n};\n\nself.onResize = function() {\n    self.onResizeScrollY();\n    \n    self.ctx.datatables.forEach(function(datatable) {\n        datatable.columns.adjust().draw('page');\n    });\n};\n\nself.onResizeScrollY = function() {\n    let minScrollY = 50;\n    self.ctx.datatables.forEach(function(datatable) {\n        let $tableContainer = $(datatable.table().container());\n        let $tableBody = $('.dataTables_scrollBody', $tableContainer);\n        let scrollY = self.ctx.$container.height() - ($tableContainer.height() - $tableBody.outerHeight()) - 80;\n        scrollY = (scrollY>minScrollY)?scrollY:minScrollY;\n        $tableBody.css('maxHeight', scrollY + 'px');\n    });\n};\n\nself.onDestroy = function() {\n    self.ctx.datatables.forEach(function(datatable) {\n        datatable.destroy();\n    });\n};\n",
        "settingsSchema": "{\n    \"schema\": {\n        \"type\": \"object\",\n        \"title\": \"Entity Settings\",\n        \"properties\": {\n            \"entityNameAttribute\": {\n                \"title\": \"Use attribute instead of entity name\",\n                \"type\": \"string\",\n                \"default\": \"\"\n            },\n            \"periodTitle\": {\n                \"title\": \"Period column title\",\n                \"type\": \"string\",\n                \"default\": \"\"\n            },\n            \"periodColumnWidth\": {\n                \"title\": \"Period column width (px or %)\",\n                \"type\": \"string\",\n                \"default\": \"\"\n            },\n            \"displayPagination\": {\n                \"title\": \"Display pagination\",\n                \"type\": \"boolean\",\n                \"default\": true\n            },\n            \"defaultPageSize\": {\n                \"title\": \"Default page size\",\n                \"type\": \"number\",\n                \"default\": 10\n            }\n        },\n        \"required\": []\n    },\n    \"form\": [\n        \"entityNameAttribute\",\n        \"periodTitle\",\n        \"periodColumnWidth\",\n        \"displayPagination\",\n        \"defaultPageSize\"\n    ]\n}",
        "dataKeySettingsSchema": "{\n    \"schema\": {\n        \"type\": \"object\",\n        \"title\": \"DataKeySettings\",\n        \"properties\": {\n            \"columnWidth\": {\n                \"title\": \"Column width (px or %)\",\n                \"type\": \"string\",\n                \"default\": \"\"\n            },\n            \"useCellStyleFunction\": {\n                \"title\": \"Use cell style function\",\n                \"type\": \"boolean\",\n                \"default\": false\n            },\n            \"cellStyleFunction\": {\n                \"title\": \"Cell style function: f(value)\",\n                \"type\": \"string\",\n                \"default\": \"\"\n            },\n            \"useCellContentFunction\": {\n                \"title\": \"Use cell content function\",\n                \"type\": \"boolean\",\n                \"default\": false\n            },\n            \"cellContentFunction\": {\n                \"title\": \"Cell content function: f(value, rowData)\",\n                \"type\": \"string\",\n                \"default\": \"\"\n            }\n        },\n        \"required\": []\n    },\n    \"form\": [\n        \"columnWidth\",\n        \"useCellStyleFunction\",\n        {\n            \"key\": \"cellStyleFunction\",\n            \"type\": \"javascript\"\n        },\n        \"useCellContentFunction\",\n        {\n            \"key\": \"cellContentFunction\",\n            \"type\": \"javascript\"\n        }\n    ]\n}",
        "defaultConfig": "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"First\",\"color\":\"#2196f3\",\"settings\":{\"showLines\":true,\"fillLines\":true,\"showPoints\":false},\"_hash\":0.8587686344902596,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"},{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Second\",\"color\":\"#ffc107\",\"settings\":{\"columnWidth\":\"0px\"},\"_hash\":0.12775350966079668,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\",\"units\":\"\",\"decimals\":null}]}],\"timewindow\":{\"realtime\":{\"interval\":5000,\"timewindowMs\":60000},\"aggregation\":{\"type\":\"NONE\",\"limit\":100}},\"showTitle\":true,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"8px\",\"settings\":{\"displayPagination\":true,\"defaultPageSize\":10},\"title\":\"Raw Table\",\"dropShadow\":true,\"enableFullscreen\":true,\"titleStyle\":{\"fontSize\":\"16px\",\"fontWeight\":400},\"mobileHeight\":null,\"widgetStyle\":{},\"useDashboardTimewindow\":false,\"showLegend\":false,\"actions\":{},\"units\":\"\",\"decimals\":null,\"displayTimewindow\":true}"
      }
    },
    {
      "alias": "telemetry_update",
      "name": "Telemetry Input",
      "descriptor": {
        "type": "latest",
        "sizeX": 8.5,
        "sizeY": 5.5,
        "resources": [],
        "templateHtml": "<div class=\"form-input-title md-padding\" layout=\"row\">\r\n    <md-input-container flex=\"100\">\r\n        <label>{{entityTitle}}</label>\r\n        <md-select name=\"entity\" ng-model=\"selectedEntity\" required>\r\n            <md-option ng-repeat=\"entity in entities\" ng-value=\"entity\">{{entity.name}}</md-option>\r\n        </md-select>\r\n    </md-input-container>\r\n</div>\r\n\r\n<div class=\"form-input-content\" style=\"overflow: auto;\">\r\n    <md-card ng-repeat=\"key in selectedDataKeys\">\r\n        <md-card-content layout=\"row\" ng-if=\"key.fieldType === 'string'\">\r\n            <md-input-container flex>\r\n                <label>{{key.label}}</label>\r\n                <input name=\"{{key.name}}\" ng-model=\"key.value\" required>\r\n            </md-input-container>\r\n            <md-input-container flex=\"20\">\r\n                <md-button ng-click=\"save(key)\">Save</md-button>\r\n            </md-input-container>\r\n        </md-card-content>\r\n        \r\n        <md-card-content layout=\"row\" ng-if=\"key.fieldType === 'number'\">\r\n            <md-input-container flex>\r\n                <label>{{key.label}}</label>\r\n                <input name=\"{{key.name}}\" type=\"number\" ng-model=\"key.value\" required>\r\n            </md-input-container>\r\n            <md-input-container flex=\"20\">\r\n                <md-button ng-click=\"save(key)\">Save</md-button>\r\n            </md-input-container>\r\n        </md-card-content>\r\n        \r\n        <md-card-content layout=\"row\" ng-if=\"key.fieldType === 'boolean'\">\r\n            <md-input-container flex>\r\n                <md-checkbox ng-model=\"key.value\">{{key.label}}: {{key.value}}</md-checkbox>\r\n            </md-input-container>\r\n            <md-input-container flex=\"20\">\r\n                <md-button ng-click=\"save(key)\">Save</md-button>\r\n            </md-input-container>\r\n        </md-card-content>\r\n        \r\n        <md-card-content layout=\"row\" ng-if=\"key.fieldType === 'datetime'\">\r\n            <md-input-container flex>\r\n                <label>{{key.label}} date</label>\r\n                <input name=\"{{key.name}}\" type=\"date\" ng-model=\"key.value\" required>\r\n            </md-input-container>\r\n            <md-input-container flex>\r\n                <label>time</label>\r\n                <input type=\"time\" ng-model=\"key.value_time\" step=\"1\">\r\n            </md-input-container>\r\n            <md-input-container flex=\"20\">\r\n                <md-button ng-click=\"save(key)\">Save</md-button>\r\n            </md-input-container>\r\n        </md-card-content>\r\n    </md-card>\r\n</div>",
        "templateCss": "",
        "controllerScript": "self.typeParameters = function() {\r\n    return {\r\n        maxDatasources: 1\r\n    };\r\n};\r\n\r\nself.onInit = function() {\r\n    let $http = self.ctx.$scope.$injector.get('$http');\r\n    let $mdDialog = self.ctx.$scope.$injector.get('$mdDialog');\r\n    let attributeService = self.ctx.$scope.$injector.get('attributeService');\r\n    let toast = self.ctx.$scope.$injector.get('toast');\r\n    \r\n    let entities = [];\r\n    let entityTitle = self.ctx.settings.entityTitle||'Entity';\r\n\r\n    self.ctx.datasources.forEach(function(datasource, indexDatasource) {\r\n        if (datasource.entityId) {\r\n            entities[indexDatasource] = {\r\n                id: datasource.entityId,\r\n                name: datasource.name,\r\n                type: datasource.entityType\r\n            };\r\n            \r\n            if (self.ctx.settings.entityNameAttribute) {\r\n                attributeService.getEntityAttributesValues(datasource.entityType, datasource.entityId, 'SERVER_SCOPE', self.ctx.settings.entityNameAttribute).then(function (attributes) {\r\n                    if (attributes && attributes.length > 0) {\r\n                        entities[indexDatasource].name = attributes[0].value;\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    });\r\n\r\n    self.ctx.$scope.save = function(selectedKey) {\r\n        if (!self.ctx.$scope.selectedEntity) {\r\n            $('md-select', self.ctx.$container).removeClass('ng-untouched');\r\n            $('md-select', self.ctx.$container).addClass('ng-touched');\r\n            return;\r\n        }\r\n        \r\n        if (selectedKey.value == null) {\r\n            $('input[name=\"' + selectedKey.name + '\"]', self.ctx.$container).parent('md-input-container').addClass('md-input-invalid');\r\n            return;\r\n        }\r\n        \r\n        let msg = 'Are you sure to update latest telemetry value?';\r\n            msg += '<br><b>' + entityTitle + ':</b> ' + self.ctx.$scope.selectedEntity.name;\r\n            msg += '<br><b>Data Key:</b> ' + selectedKey.label;\r\n        let confirm = $mdDialog.confirm()\r\n          .title('Warning!!!')\r\n          .htmlContent(msg)\r\n          .ok('Yes')\r\n          .cancel('No');\r\n        $mdDialog.show(confirm).then(function() {\r\n            let url = '/api/plugins/telemetry/' + self.ctx.$scope.selectedEntity.type + '/' + self.ctx.$scope.selectedEntity.id + '/timeseries/scope';\r\n            let telemetriesData = {};\r\n            telemetriesData[selectedKey.name] = selectedKey.value;\r\n            \r\n            if (selectedKey.fieldType === 'datetime') {\r\n                if (selectedKey.value_time) {\r\n                    telemetriesData[selectedKey.name] = new Date(selectedKey.value.getFullYear(), selectedKey.value.getMonth(), selectedKey.value.getDate(), selectedKey.value_time.getHours(), selectedKey.value_time.getMinutes(), selectedKey.value_time.getSeconds()).getTime();\r\n                }\r\n                else {\r\n                    telemetriesData[selectedKey.name] = selectedKey.value.getTime();\r\n                }\r\n            }\r\n            \r\n            $http.post(url, telemetriesData).then(\r\n                function(response) {\r\n                    toast.showSuccess('Update successful', 1000, self.ctx.$container, 'bottom left');\r\n                },\r\n                function() {\r\n                    toast.showError('Update failed', self.ctx.$container, 'bottom left');\r\n                }\r\n            );\r\n        });\r\n    };\r\n\r\n    self.ctx.$scope.entities = entities;\r\n    self.ctx.$scope.dataKeys = [];\r\n    self.ctx.$scope.entityTitle = entityTitle;\r\n    self.ctx.$scope.selectedEntity = null;\r\n    self.ctx.$scope.selectedDataKeys = [];\r\n};\r\n\r\nself.onDataUpdated = function() {\r\n    if (self.ctx.$scope.dataKeys.length === 0) {\r\n        let dataKeys = self.ctx.$scope.dataKeys;\r\n        self.ctx.datasources[0].dataKeys.forEach(function(dataKey, indexDataKey) {\r\n            dataKeys[indexDataKey] = {\r\n                name: dataKey.name,\r\n                label: dataKey.label,\r\n                keyType: dataKey.type,\r\n                fieldType: dataKey.settings.fieldType,\r\n                value: null\r\n            };\r\n        });\r\n    \r\n        self.ctx.data.forEach(function(cellData) {\r\n            let datakeyIndex = cellData.datasource.dataKeys.indexOf(cellData.dataKey);\r\n            if (!dataKeys[datakeyIndex].fieldType) {\r\n                if (cellData.data.length > 0) {\r\n                    let cellValue = cellData.data[cellData.data.length - 1][1];\r\n                    if (typeof cellValue === 'number') {\r\n                        dataKeys[datakeyIndex].fieldType = 'number';\r\n                    }\r\n                    else if (typeof cellValue === 'boolean') {\r\n                        dataKeys[datakeyIndex].fieldType = 'boolean';\r\n                    }\r\n                    else {\r\n                        dataKeys[datakeyIndex].fieldType = 'string';\r\n                    }\r\n                }\r\n                else {\r\n                    dataKeys[datakeyIndex].fieldType = 'string';\r\n                }\r\n            }\r\n        });\r\n    \r\n        dataKeys.forEach(function(dataKey) {\r\n            if (dataKey.fieldType === 'boolean') {\r\n                dataKey.value = false;\r\n            }\r\n        });\r\n        \r\n        self.ctx.$scope.selectedDataKeys = dataKeys.filter(function(dataKey) {\r\n            return dataKey.keyType === 'timeseries';\r\n        });\r\n        \r\n        self.onResize();\r\n    }\r\n};\r\n\r\nself.onResize = function() {\r\n    $('.form-input-content', self.ctx.$container).height(self.ctx.$container.height() - $('.form-input-title', self.ctx.$container).height() - 40);\r\n};\r\n",
        "settingsSchema": "{\n    \"schema\": {\n        \"type\": \"object\",\n        \"title\": \"Entity Settings\",\n        \"properties\": {\n            \"entityTitle\": {\n                \"title\": \"Entities title\",\n                \"type\": \"string\",\n                \"default\": \"\"\n            },\n            \"entityNameAttribute\": {\n                \"title\": \"Use attribute instead of entity name\",\n                \"type\": \"string\",\n                \"default\": \"\"\n            }\n        },\n        \"required\": []\n    },\n    \"form\": [\n        \"entityTitle\",\n        \"entityNameAttribute\"\n    ]\n}",
        "dataKeySettingsSchema": "{\n    \"schema\": {\n        \"type\": \"object\",\n        \"title\": \"DataKeySettings\",\n        \"properties\": {\n            \"fieldType\": {\n                \"title\": \"Field Type (string, number, boolean, datetime)\",\n                \"type\": \"string\",\n                \"default\": \"\"\n            }\n        },\n        \"required\": []\n    },\n    \"form\": [\n        \"fieldType\"\n    ]\n}",
        "defaultConfig": "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.15479322438769105,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":true,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"8px\",\"settings\":{},\"title\":\"Telemetry Input\"}"
      }
    }
  ]
}